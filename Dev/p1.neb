
///// Tester for development features.

// My akai kbd midi: Pad1-8 = 44-51, knob1-8 = ctlr1-8


include scale.neb


////////// Constants //////////
constant WHEN1         32
constant KEYS_DEF_VOL 100
constant DRUM_DEF_VOL 100

////////// Variables //////////
variable COL1   200 // change color
variable MODN     0 // modulate notes
variable PITCH 8192 // center is 8192

////////// Chords and scales //////////
notes CHORD1   1 2 3
notes CHORD2   1 4 6 b13
notes MY_SCALE 1 3 4 b7

////////// Realtime Controllers //////////
midictlin  MI1 1 4     MODN
midictlout MO1 1 Pitch PITCH

////////// Levers //////////
lever L1   0  255   COL1
lever L2   0  16383 PITCH // max range
lever L3 -10  10    MODN

////////// Tracks //////////
track KEYS   1 5 0 0
track BASS   2 2 0 0
track SYNTH  3 0
track DRUMS 10 4 0 0

////////// Sections //////////
section PART1 0 WHEN1 // section name start length
KEYS    SEQ1           ALGO1       SEQ1          SEQ2
DRUMS   DRUMS_SIMPLE   DRUMS_HH    DRUMS_SIMPLE  DRUMS_HH

section PART2 WHEN1 60
KEYS    SEQ1      SEQ2 
DRUMS   DRUMS_HH  DRUMS_HH   

////////// Sequences //////////

sequence SEQ1 8
00.00  G3        90  0.60
01.00  A3.m7     90  0.60
02.00  Bb3       90  0.60
03.00  C4.CHORD2 90  0.60

sequence SEQ2 8
00.00  C4  90  0.60
01.00  D4  90  0.60
02.00  E4  90  0.60
03.00  F4  90  0.60

sequence ALGO1 8
00.00  algoDynamic()  90


// Sequences using patterns. Each hit is 1/16 note - fixed res for now.
sequence  DRUMS_SIMPLE  8 // 32 x 1/16 = 8 x 1/4
x-------x-------x-------x-------  AcousticBassDrum  90
----x-------x-x-----x-------x-x-  AcousticSnare     80

sequence  DRUMS_HH  8
------xx------xx------xx------xx  ClosedHiHat  100


///// Functions /////

// Index is note number, value is when to stop it.
int[] _notesPlaying = new int[128];

// Test scale.
Scale _scale;

public override void setup()
{
    _scale = new Scale("Algerian", "C4", 1, 1);
    // 1 2 b3 #4 5 b6 7
    _scale.SetWeight(0, 50);
    _scale.SetWeight(4, 50);
    _scale.SetWeight(2, 30);

    if(winGm)
    {
        sendPatch(KEYS, AcousticGrandPiano);
        sendPatch(BASS, AcousticBass);
        sendPatch(SYNTH, Pad3Polysynth);
    }

    frameRate(2);
    background(150);
}

public override void step()
{
    if(tock == 0)
    {
        algoDynamic();
    }
}


void algoDynamic()
{
    //if(random(3) == 0)
    {
        int which = _scale.RandomNote();
        print(which);

        if(_notesPlaying[which] == 0) // don't play if already playing
        {
            //print("algoDynamic:", which);
            int dur = random(1, 4);
            _notesPlaying[which] = tick + dur;
            sendMidiNote(SYNTH, which, random(80, 100), dur);
        }
    }

    // Remove any scheduled to stop now.
    for(int i = 0;i < _notesPlaying.Length;i++)
    {
        if(_notesPlaying[i] != 0 && _notesPlaying[i] == tick)
        {
            _notesPlaying[i] = 0;
        }
    }

    // if(tick % 9 == 0)
    // {
    //     playSequence(KEYS, SEQ1);
    // }

    // if(tick % 13 == 0)
    // {
    //     playSequence(KEYS, SEQ2);
    // }
}

public void On_MODN()
{
    print("MODN changed to", MODN);
    modulate(KEYS, MODN);
}

public override void draw()
{
    //print("draw");

    // background(150);

    fill(COL1, 100, 200);

    ellipse(random(50, width - 50), random(50, height - 50), random(50, 100), random(50, 100));

    rect(random(50, width - 50), random(50, height - 50), random(50, 100), random(50, 100));

    // noLoop(); // run once only
}

public override void mouseClicked()
{
    // Note selected based on mouse position.
    int sn = (int)map(mouseX, 0, width, 55, 70);
    sendMidiNote(SYNTH, sn, 90, 0.48);
}
