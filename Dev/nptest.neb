
///// Tester for Processing workalike.


// Try "import".
include nputils.neb


public override void setup()
{
    // testStuff();

    // setup_force_fail();
    // setup_bezier();
    setup_radial_gradient();
    // setup_sine_cosine();
    // setup_random_gaussian();
    // setup_loadfiles1();
    // setup_pointillism();
}

public override void draw()
{
    // draw_force_fail();
    // draw_ball();
    // draw_bezier();
    draw_radial_gradient();
    // draw_regular_polygon();
    // draw_sine_cosine();
    // draw_random_gaussian();
    // draw_embedded_iteration();
    // draw_loadfiles1();
    // draw_pointillism();
}


////////////// test /////////////////////
void testStuff()
{
    int[] vals = { 1, 2, 3, 4, 5 };

    print("print()", vals[2]);
    print("print", vals[4]);
    printArray(vals);
}

public override void keyPressed()
{
    print(key);
}

////////////// bezier /////////////////////
void setup_bezier()
{
    //size(640, 360);
    stroke(255);
    noFill();
}

void draw_bezier()
{
    background(100);
    for (int i = 0; i < 200; i += 20)
    {
        bezier(mouseX - (i / 2), 40 + i, 410, 20, 440, 300, 240 - (i / 16), 300 + (i / 8));
    }
}


///////////////////// force fail /////////////////////////////////
void setup_force_fail()
{
    print("setup_force_fail()");
    int x = 1;
    int y = 0;
    int z = x / y;
}

void draw_force_fail()
{
    print("draw_force_fail()");
    int x = 1;
    int y = 0;
    int z = x / y;
}

public override void step()
{
    //print("step()");
    int x = 1;
    int y = 0;
    //int z = x / y;
    int z = x + y;
}


///////////////////// ball /////////////////////////////////
float posX = 50;
float posY = 50;
int velX = 3;
int velY = 3;
int ballSize = 40;

void draw_ball()
{
    moveBall();

    Dummy d = new Dummy(5);
    int cd = d.GetThing(10);

    // Draw the ball.
    noStroke();
    int x = (int)map(posX, 0, width, 0, 255);
    fill(x, (x + 100) % 256, cd % 256);
    ellipse(posX, posY, ballSize, ballSize);

    if (mouseIsPressed)
    {
        //print("mouse is pressed");
        fill(random(255), random(255), random(255));
        strokeWeight(2);
        stroke(0, 100);
        ellipse(mouseX, mouseY, 80, 80);
    }
}

bool moveBall()
{
    bool edge = false;

    ///// Move the ball. /////
    posX += velX;
    if (posX <= ballSize / 2)
    {
        posX = ballSize / 2;
        velX = -velX;
        edge = true;
    }
    else if (posX >= width - ballSize / 2)
    {
        posX = width - ballSize / 2;
        velX = -velX;
        edge = true;
    }

    posY += velY;
    if (posY <= ballSize / 2)
    {
        posY = ballSize / 2;
        velY = -velY;
        edge = true;
    }
    else if (posY >= height - ballSize / 2)
    {
        posY = height - ballSize / 2;
        velY = -velY;
        edge = true;
    }
    return edge;
}


//////////////// regular polygon ///////////////////
//https://processing.org/examples/regularpolygon.html

void draw_regular_polygon()
{
    background(102);

    pushMatrix();
    translate(width * 0.2f, height * 0.5f);
    rotate(frameCount / 20); // 200
    polygon(0, 0, 82, 3);  // Triangle
    popMatrix();

    pushMatrix();
    translate(width * 0.5f, height * 0.5f);
    rotate(frameCount / 10); // 50
    polygon(0, 0, 80, 10);  // 20 = Icosahedron
    popMatrix();

    pushMatrix();
    translate(width * 0.8f, height * 0.5f);
    rotate(frameCount / -10); // -100
    polygon(0, 0, 70, 7);  // Heptagon
    popMatrix();
}

void polygon(float x, float y, float radius, int npoints)
{
    float angle = TWO_PI / npoints;
    beginShape();
    for (float a = 0; a < TWO_PI; a += angle)
    {
        float sx = x + cos(a) * radius;
        float sy = y + sin(a) * radius;
        //vertex(sx, sy);
        vertex((int)sx, (int)sy);
    }
    endShape();//CLOSE);
}


//////////////// radial gradient ///////////////////
//https://processing.org/examples/radialgradient.html


void setup_radial_gradient()
{
    //size(640, 360);
    background(100);
    //colorMode(RGB, 255, 100, 100);
    colorMode(HSB, 360, 100, 100);
    noStroke();
    //ellipseMode(RADIUS);
    frameRate(1);
}

void draw_radial_gradient()
{
    int dim = width / 2;
    background(100);

    // int y = random(0, height);
    int y = height / 2;

    for (int x = 0; x <= width; x += dim)
    {
        int radius = dim / 2;
        int h = random(0, 360);

        for (int r = radius; r > 0; r-=1)
        {
            fill(h, 90, 90);
            ellipse(x, y, r * 2, r * 2);
            h = (h + 1) % 360;
        }
    }
}


////////////////////// sine cosine /////////////////////////////
float x1, x2, y1, y2;
float angle1, angle2;
float scalar = 70;

void setup_sine_cosine()
{
    //size(640, 360);
    noStroke();
    rectMode(CENTER);
}

void draw_sine_cosine()
{
    background(0);

    float ang1 = radians(angle1);
    float ang2 = radians(angle2);

    x1 = width / 2 + (scalar * cos(ang1));
    x2 = width / 2 + (scalar * cos(ang2));

    y1 = height / 2 + (scalar * sin(ang1));
    y2 = height / 2 + (scalar * sin(ang2));

    fill(255);
    rect(width * 0.5f, height * 0.5f, 140, 140);

    fill(0, 102, 153);
    ellipse(x1, height * 0.5f - 120, scalar, scalar);
    ellipse(x2, height * 0.5f + 120, scalar, scalar);

    fill(255, 204, 0);
    ellipse(width * 0.5f - 120, y1, scalar, scalar);
    ellipse(width * 0.5f + 120, y2, scalar, scalar);

    angle1 += 2;
    angle2 += 3;
}


///////////////////// embedded iteration ///////////////////////////
void draw_embedded_iteration()
{
    //size(640, 360);
    background(0);

    int gridSize = 40;

    for (int x = gridSize; x <= width - gridSize; x += gridSize)
    {
        for (int y = gridSize; y <= height - gridSize; y += gridSize)
        {
            noStroke();
            fill(255);
            rect(x - 1, y - 1, 3, 3);
            stroke(255, 100);
            line(x, y, width / 2, height / 2);
        }
    }
}


////////////////////// pointillism //////////////////////////
PImage img;
int smallPoint, largePoint;

void setup_pointillism()
{
    //size(640, 360);
    img = loadImage(@"C:\Dev\Nebulator\Dev\balls.png");
    //image(img, 0, 0);//, width, height);
    smallPoint = 4;
    largePoint = 40;
    //imageMode(CENTER);
    noStroke();
    // background(255);
}

void draw_pointillism()
{
    float pointillize = map(mouseX, 0, width, smallPoint, largePoint);
    pointillize = 10; // dev
    int x = @int(random(img.width));
    int y = @int(random(img.height));
    color pix = img.get(x, y);
    fill(red(pix), green(pix), blue(pix), 128);
    ellipse(x, y, pointillize, pointillize);
}


///////////////////// random gaussian ///////////////////////////
void setup_random_gaussian()
{
    //size(640, 360);
    frameRate(5); // added 
    background(0);
    noStroke();
}

void draw_random_gaussian()
{
    // Get a gaussian random number with mean of 0 and standard deviation of 1.0
    float val = randomGaussian();

    float sd = 60;                  // Define a standard deviation
    float mean = width / 2;         // Define a mean value (middle of the screen along the x-axis)
    float x = ( val * sd ) + mean;  // Scale the gaussian random number by standard deviation and mean

    fill(255, 30);
    ellipse(x, height / 2, 32, 32);   // Draw an ellipse at our "normal" random location
}


//////////////////// load files ////////////////////////////
String[] lines;
int index = 0;

void setup_loadfiles1()
{
    size(200, 200);
    background(0);
    stroke(255);
    frameRate(12);
    lines = loadStrings("positions.txt");
}

void draw_loadfiles1()
{
    if (index < lines.Length)
    {
        String[] pieces = split(lines[index], '\t');
        if (pieces.Length == 2)
        {
            int x = @int(pieces[0]) * 2;
            int y = @int(pieces[1]) * 2;
            point(x, y);
        }
        // Go to the next line for the next run through draw()
        index = index + 1;
    }
}
