
// Thoughts for scripting improvements.

include ..\Examples\utils.neb
include scale.neb
//>>>>
import "..\Examples\utils.neb";
import scale.neb;

constant WHEN1 32
//>>>>
constant WHEN1 = 32;
WHEN1 = constant(32);

variable COL1 200
//>>>>
variable COL1 = 200;
COL1 = variable(200);

notes CHORD1   1 2 3
//>>>>
notes CHORD1 = 1, 2, 3;
notes CHORD1(1, 2, 3);
CHORD1 = notes(1, 2, 3);

midictlin  MI1 1 4     COL1
//>>>>
midictlin MI1(1, 4, COL1);
MI1 = midictlin(1, 4, COL1);
// ditto for:
// midictlout MO1 1 Pitch PITCH
// lever L1   0  255   COL1
// track KEYS   1 5 0 0
KEYS = track(1, 5, 0, 0);


section PART1 0 WHEN1 // section name start length
KEYS    SEQ1           ALGO1       SEQ1          SEQ2  // trackname sequence sequence ...
DRUMS   DRUMS_SIMPLE   DRUMS_HH    DRUMS_SIMPLE  DRUMS_HH
//>>>>
section(WHEN1, PART1, 0);
WHEN1 = section(PART1, 0);
// like var WHEN1 = new section(PART1, 0);
WHEN1 += KEYS, SEQ1, ALGO1, SEQ1, SEQ2;
WHEN1.Add(KEYS, SEQ1, ALGO1, SEQ1, SEQ2);


sequence SEQ1 8
00.00  G3        90  0.60
01.00  algoDynamic()  90
02.00  A3.m7     90  0.60
//>>>>
sequence(SEQ1, 8);
SEQ1 = sequence(8);
SEQ1.Add(00.00, G3, 90, 0.60);
SEQ1.Add(01.00, algoDynamic(), 90);
SEQ1.Add(02.00, A3.m7, 90, 0.60);


sequence  DRUMS_SIMPLE  8 // 32 x 1/16 = 8 x 1/4
x-------x-------x-------x-------  AcousticBassDrum  90
----x-------x-x-----x-------x-x-  AcousticSnare     80
//>>>>
sequence(DRUMS_SIMPLE, 8);
DRUMS_SIMPLE = sequence(8);
DRUMS_SIMPLE.Add(x-------x-------x-------x-------, AcousticBassDrum, 90);
DRUMS_SIMPLE.Add(----x-------x-x-----x-------x-x-, AcousticSnare, 80);







////////////// Markdown style? ////////////////
// # My Nebulator Composition
// Thoughts for scripting improvements.

// # Chords
// These are the built-in chords. You can add your own in your script.

// Chord | Notes | Description
// ----- | ----- | -----------
// M | 1 3 5 | Named after the major 3rd interval between root and 3.
// m | 1 b3 5 | Named after the minor 3rd interval between root and b3.
// 7 | 1 3 5 b7 | Also called dominant 7th.
// M7 | 1 3 5 7 | Named after the major 7th interval between root and 7th major scale note.




//////////////// script stuff /////////////////////
!script


int[] _notesPlaying = new int[128];

Scale _scale;

public override void setup()
{
    _scale = new Scale("Algerian", "C4");
    // 1 2 b3 #4 5 b6 7
    _scale.SetWeight(0, 50);
    _scale.SetWeight(4, 50);
    _scale.SetWeight(2, 30);

    // Test stuff.
    int[] notes = getNotes("C4");
    int[] scaleNotes = getScaleNotes("Algerian", "C4");
}


public class Scale
{
    public int count = 0;
    int[] scaleNotes;

    public Scale(string scale, string root, int octDown, int octUp)
    {
        scaleNotes = s.getScaleNotes(scale, root);  //<<<<<<< s. notation! make all script funcs static then derive all new classes from ScriptCore?
        count = scaleNotes.Count();
    }
}