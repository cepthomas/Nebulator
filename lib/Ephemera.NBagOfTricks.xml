<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ephemera.NBagOfTricks</name>
    </assembly>
    <members>
        <member name="T:Ephemera.NBagOfTricks.Bag">
            <summary>
            General purpose storage for things using a two part key.
            </summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.Bag.FileName">
            <summary>The file name.</summary> 
        </member>
        <member name="P:Ephemera.NBagOfTricks.Bag.Values">
            <summary>Misc dynamic values that we want to persist. Needs to be public so serializer can see it.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.Bag.Valid">
            <summary>Is this bag ok?</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.Clear">
            <summary>
            Reset everything.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.GetDouble(System.String,System.String,System.Double)">
            <summary>
            Lazy helper.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <param name="defval"></param>
            <returns>The value or default if not in the collection.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.GetInteger(System.String,System.String,System.Int32)">
            <summary>
            Lazy helper.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <param name="defval"></param>
            <returns>The value or default if not in the collection.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.GetString(System.String,System.String,System.String)">
            <summary>
            Lazy helper.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <param name="defval"></param>
            <returns>The value or default if not in the collection.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.SetValue(System.String,System.String,System.Object)">
            <summary>
            Lazy helper.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.MakeKey(System.String,System.String)">
            <summary>
            Common key maker.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.Save">
            <summary>
            Save to json file.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Bag.Load(System.String)">
            <summary>
            Create from json file.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.BitmapUtils.ConvertToGrayscale(System.Drawing.Bitmap)">
            <summary>
            De-colorize.
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.BitmapUtils.ResizeBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resize the image to the specified width and height.
            </summary>
            <param name="bmp">The image to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <returns>The resized image.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.BitmapUtils.ColorizeBitmap(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Colorize a bitmap. Mainly for beautifying glyphicons.
            </summary>
            <param name="original"></param>
            <param name="newcol"></param>
            <param name="replace">Optional source color to replace. Defaults to black.</param>
            <returns></returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PixelBitmap">
            <summary>Fast pixel read/write. Borrowed from https://stackoverflow.com/a/34801225. TODO useful? Simplify?/// </summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.PixelBitmap._buff">
            <summary>Unmanaged buffer.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.PixelBitmap._hBuff">
            <summary>Unmanaged buffer handle.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.PixelBitmap._disposed">
            <summary>Resource management.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PixelBitmap.Bitmap">
            <summary>Managed image for client consumption.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            Normal constructor.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.Finalize">
            <summary>
            Override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.Dispose">
            <summary>
            Boilerplate.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.Dispose(System.Boolean)">
            <summary>
            Boilerplate.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="colour"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.SetPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PixelBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.ConsoleColorEx">
            <summary>ConsoleColor variation with None added.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.ColorFromAnsi(System.String)">
            <summary>
            Decode ansi escape sequence arguments. TODO AnsiFromColor()
            </summary>
            <param name="ansi">Ansi args string</param>
            <returns>Foreground and background colors. Color is Empty if invalid ansi string.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.MakeColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Color object from rgb. If it is in the named collection, the name is applied.
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.ToSystemColor(System.ConsoleColor)">
            <summary>Convert ConsoleColor to System.Color.</summary>
            <param name="conclr">In color</param>
            <returns>Out color</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.ToConsoleColor(System.Drawing.Color)">
            <summary>Convert System.Color to ConsoleColor.</summary>
            <param name="sysclr">The color</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.ToConsoleColor_simple(System.Drawing.Color)">
            <summary>Simple binning approach.</summary>
            <param name="sysclr"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.GetSequenceColor(System.Int32,System.Boolean)">
            <summary>
            Helper to get next contrast color in the sequence.
            From http://colorbrewer2.org qualitative.
            </summary>
            <param name="i"></param>
            <param name="dark">Dark or light series, usually dark.</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.ColorUtils.HalfMix(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Mix two colors.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <returns></returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.JsonColorConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.JsonPointFConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.JsonRectangleConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.JsonFontConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MathUtils">
            <summary>
            Static math utility functions.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.InitRand(System.Int32)">
            <summary>
            Seed the randomizer.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.RandStr(System.Int32)">
            <summary>
            Get a random alphanumeric string.
            </summary>
            <param name="num">String length.</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.RandRange(System.Int32,System.Int32)">
            <summary>
            Get the next random integer in the range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.RandRange(System.Double,System.Double)">
            <summary>
            Get the next random double in the range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.IsClose(System.Double,System.Double,System.Double)">
            <summary>
            Compare two doubles "close enough".
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.SplitDouble(System.Double)">
            <summary>
            Split a double into two parts: each side of the dp.
            </summary>
            <param name="val"></param>
            <returns>tuple of integral and fractional</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.DegreesToRadians(System.Double)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.RadiansToDegrees(System.Double)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Map(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Standard Deviation based on a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Standard Deviation</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.SumOfSquares(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Sum of Squares given a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Sum of Squares</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.RMS(System.Single[])">
            <summary>
            The root mean square value of a quantity is the square root of the mean value of the squared values of the quantity taken over an interval.
            </summary>
            <param name="inputArray"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
            Generates normally distributed numbers.
            </summary>
            <param name="r"></param>
            <param name="mean">Mean</param>
            <param name="sigma">Sigma</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Constrain(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Constrain(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Ensure integral multiple of resolution, GTE min, LTE max.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.DecPlaces(System.Double)">
            <summary>
            Figure a reasonable number of dps to print based on value range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.NumDigits(System.Int32)">
            <summary>
            Number of digits in an int ignoring sign.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MathUtils.Clamp(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Snap to closest neighbor.
            </summary>
            <param name="val"></param>
            <param name="granularity">The neighbors property line.</param>
            <param name="round">Round or truncate.</param>
            <returns></returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MiscUtils">
            <summary>
            Static general utility functions.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.GetVersionString">
            <summary>
            Returns a string with the application version information.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.GetAppDataDir(System.String,System.String)">
            <summary>
            Get the user app dir. Creates it if it doesn't exist.
            </summary>
            <param name="appName"></param>
            <param name="company">Optionally nest under company name.</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.GetSourcePath(System.String)">
            <summary>
            Get the dir name of the caller's source file.
            </summary>
            <param name="callerPath"></param>
            <returns>Caller source dir.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.ShowReadme(System.String)">
            <summary>
            Display the application readme.
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.FixEndian(System.UInt32)">
            <summary>
            Endian support.
            </summary>
            <param name="i">Number to fix.</param>
            <returns>Fixed number.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.FixEndian(System.UInt16)">
            <summary>
            Endian support.
            </summary>
            <param name="i">Number to fix.</param>
            <returns>Fixed number.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.MakeExportFileName(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new clean filename for export. Creates path if it doesn't exist.
            </summary>
            <param name="path">Export path</param>
            <param name="baseFn">Root of the new file name</param>
            <param name="mod">Modifier</param>
            <param name="ext">File extension</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.Subset``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get a subset of an array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.InvokeIfRequired``1(``0,Ephemera.NBagOfTricks.MiscUtils.InvokeIfRequiredDelegate{``0})">
            <summary>
            Invoke helper, maybe.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            Each element's index is used in the logic of the action.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element; the second parameter
            of the action represents the index of the source element.</param>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MiscUtils.MarkdownMode">
            <summary>How to render</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MiscUtils.MarkdownToHtml(System.Collections.Generic.List{System.String},Ephemera.NBagOfTricks.MiscUtils.MarkdownMode,System.Boolean)">
            <summary>
            Convert list of markdown lines to html.
            </summary>
            <param name="body">The md text.</param>
            <param name="mode">What flavor.</param>
            <param name="show">If true open in browser.</param>
            <returns>Valid html.</returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MmTimerEx">
            <summary>
            The win multimedia timer is erratic. Using a one msec tick (fastest), the measured interval is +-100 us.
            Also note that it takes about 10 ticks to settle down after start.
            This component attempts to reduce the error by running at one msec and managing the requested periods manually.
            This is accomplished by using a Stopwatch to actually measure the elapsed time rather than trust the mm timer period.
            It seems to be an improvement.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MmTimerEx.TimeProc">
            <summary>Client callback occurs when the time period has elapsed.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MmTimerEx.TimerInstance">
            <summary>Tracking instances of client timers.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx.TimerInstance.period">
            <summary>The requested time between events in msec.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx.TimerInstance.handler">
            <summary>User handler.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx.TimerInstance.elapsed">
            <summary>Actual accumulated msec since last event.</summary> 
        </member>
        <member name="P:Ephemera.NBagOfTricks.MmTimerEx.Running">
            <summary>Indicates whether or not the timer is running.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._timers">
            <summary>All the timer instances. Key is id.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._sw">
            <summary>Used for more accurate timing.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._timerID">
            <summary>Multimedia timer identifier. -1 is not inited, 0 is fail to init, other is valid id.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._startTicks">
            <summary>Stopwatch support.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._lastTicks">
            <summary>Stopwatch support.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx.MMTIMER_PERIOD">
            <summary>Msec for mm timer tick.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._timeProc">
            <summary>Called by Windows when a mm timer event occurs.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx._disposed">
            <summary>Resource management.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods">
            <summary>Win32 Multimedia Timer Functions.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.timeGetDevCaps(Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps@,System.Int32)">
            <summary></summary>
            <param name="caps"></param>
            <param name="sizeOfTimerCaps"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.timeSetEvent(System.Int32,System.Int32,Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.TimeProc,System.IntPtr,System.Int32)">
            <summary>Start her up.</summary>
            <param name="delay">Event delay, in milliseconds.If this value is not in the range of the minimum and maximum event delays supported by the timer, the function returns an error.</param>
            <param name="resolution">Resolution of the timer event, in milliseconds. The resolution increases with smaller values; a resolution of 0 indicates periodic events should occur with the greatest possible accuracy. To reduce system overhead, however, you should use the maximum value appropriate for your application.</param>
            <param name="proc">Pointer to a callback function that is called once upon expiration of a single event or periodically upon expiration of periodic events.</param>
            <param name="user">User-supplied callback data.</param>
            <param name="mode">Timer event type.</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.timeKillEvent(System.Int32)">
            <summary></summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.TimeProc">
            <summary>Called by Windows when a mm timer event occurs.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps">
            <summary>Represents information about the multimedia timer capabilities.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps.periodMin">
            <summary>Minimum supported period in milliseconds.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps.periodMax">
            <summary>Maximum supported period in milliseconds.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.#ctor">
            <summary>
            Initializes a new instance of the Timer class. OK to throw in here.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.Finalize">
            <summary>
            Override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.Dispose">
            <summary>
            Boilerplate.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.Dispose(System.Boolean)">
            <summary>
            Boilerplate.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.SetTimer(System.Int32,Ephemera.NBagOfTricks.MmTimerEx.TimeProc)">
            <summary>
            Add or update a timer instance.
            </summary>
            <param name="period">Period in msec </param>
            <param name="handler">Client callback</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.Start">
            <summary>
            Starts the periodic timer. OK to throw in here.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.Stop">
            <summary>
            Stops timer.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MmTimerEx.MmTimerCallback(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            System multimedia timer callback. Don't trust the accuracy of the mm timer so measure actual using a stopwatch.
            </summary>
            <param name="id">The identifier of the timer. The identifier is returned by the timeSetEvent function.</param>
            <param name="msg">Reserved.</param>
            <param name="user">The value that was specified for the dwUser parameter of the timeSetEvent function.</param>
            <param name="param1">Reserved.</param>
            <param name="param2">Reserved.</param>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MultiFileWatcher">
            <summary>
            A watcher for multiple file changes. The underlying FileSystemWatcher is a bit sensitive to OS file system ops.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MultiFileWatcher.FileChangeEventArgs">
            <summary>Reporting a change to listeners.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MultiFileWatcher._watchers">
            <summary>Detect changed files.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MultiFileWatcher._timer">
            <summary>Used to delay reporting to client as there can be multiple events for one file change.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MultiFileWatcher._touchedFiles">
            <summary>Set by subordinate watchers.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MultiFileWatcher.DELAY">
            <summary>The delay before reporting. Seems like a reasonable number for human edit interface.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MultiFileWatcher.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MultiFileWatcher.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handle timer tick. Sends event out if any constituents triggered.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MultiFileWatcher.Add(System.String)">
            <summary>
            Add a new listener.
            </summary>
            <param name="path"></param>
            <return>Pass/fail</return>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MultiFileWatcher.Clear">
            <summary>
            Remove all listeners.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MultiFileWatcher.Watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handle underlying change notification.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MultiFileWatcher.Dispose">
            <summary>
            Resource clean up.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.MusicDefinitions">
            <summary>Definitions for use inside scripts. For doc see MusicDefinitions.md.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions._chordsScales">
            <summary>The chord/scale note definitions. Key is chord/scale name, value is list of constituent notes.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions.NOTES_PER_OCTAVE">
            <summary>all the notes.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.#cctor">
            <summary>
            Load chord and scale definitions.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.FormatDoc">
            <summary>
            Make markdown content from the definitions.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions._noteNames">
            <summary>All possible note names and aliases.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions._naturals">
            <summary>Helpers.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions._intervals">
            <summary>Helpers.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions._chordDefs">
            <summary>All the builtin chord defs.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.MusicDefinitions._scaleDefs">
            <summary>All the builtin scale defs.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.NoteNumberToName(System.Int32)">
            <summary>
            Convert note number into name.
            </summary>
            <param name="inote"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.NoteNameToNumber(System.String)">
            <summary>
            Convert note name into number.
            </summary>
            <param name="snote">The root of the note without octave.</param>
            <returns>The number or -1 if invalid.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.GetNotesFromString(System.String)">
            <summary>
            Parse note or notes from input value.
            </summary>
            <param name="noteString">Standard string to parse.</param>
            <returns>List of note numbers - empty if invalid.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.IsNatural(System.Int32)">
            <summary>
            Is it a white key?
            </summary>
            <param name="notenum">Which note</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.SplitNoteNumber(System.Int32)">
            <summary>
            Split a midi note number into root note and octave.
            </summary>
            <param name="notenum">Absolute note number</param>
            <returns>tuple of root and octave</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.GetInterval(System.String)">
            <summary>
            Get interval offset from name.
            </summary>
            <param name="sinterval"></param>
            <returns>Offset or -1 if invalid.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.GetInterval(System.Int32)">
            <summary>
            Get interval name from note number offset.
            </summary>
            <param name="iint">The name or empty if invalid.</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.FormatNotes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Try to make a note and/or chord string from the param. If it can't find a chord return the individual notes.
            </summary>
            <param name="notes"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.AddChordScale(System.String,System.String)">
            <summary>
            Add a new chord or scale definition.
            </summary>
            <param name="name">which</param>
            <param name="notes">what</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.MusicDefinitions.GetChordScale(System.String)">
            <summary>
            Get a defined chord or scale definition.
            </summary>
            <param name="name">which</param>
            <returns>The list of notes or empty if invalid.</returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PNUT.OutputFormat">
            <summary>
            Generate a human readable or junit format output.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PNUT.TestContext">
            <summary>
            Accumulates general test info.
            </summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.Format">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.StopOnFail">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.CurrentSuiteId">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.CurrentSuitePass">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.NumSuitesRun">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.NumSuitesFailed">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.CurrentCasePass">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.NumCasesRun">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.NumCasesFailed">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.OutputLines">
            <summary></summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestContext.PropertyLines">
            <summary></summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PNUT.AssertException">
            <summary>
            Specific exception type.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PNUT.TestFailException">
            <summary>
            Specific exception type.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PNUT.TestRunner">
            <summary>
            The orchestrator of the test execution.
            </summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.PNUT.TestRunner.TIME_FORMAT">
            <summary>Format string.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.PNUT.TestRunner.DATE_TIME_FORMAT_MSEC">
            <summary>Format string.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestRunner.Context">
            <summary>The test context.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestRunner.#ctor(Ephemera.NBagOfTricks.PNUT.OutputFormat)">
            <summary>
            Normal constructor.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestRunner.RunSuites(System.String[])">
            <summary>
            Run selected cases.
            </summary>
            <param name="which">List of names of test cases to run. If the test case names begin with these values they will run.</param>
        </member>
        <member name="T:Ephemera.NBagOfTricks.PNUT.TestSuite">
            <summary>
            Defining class for an individual test suite.
            </summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestSuite.CaseCnt">
            <summary>Accumulated count.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestSuite.CaseFailCnt">
            <summary>Accumulated count.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.PNUT.TestSuite.Context">
            <summary>Common context info.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.RunSuite">
            <summary>
            All test case specifications must supply this.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.RecordResult(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Record a test result.
            </summary>
            <param name="pass"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.RecordProperty(System.String,System.String)">
            <summary>
            Record a property into the report.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.RecordVerbatim(System.String)">
            <summary>
            Record a verbatim text line into the report.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_STOP_ON_FAIL(System.Boolean)">
            <summary>
            Toggle the fatal bail out mechanism.
            </summary>
            <param name="value">True/false</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_INFO(System.String,System.Object[])">
            <summary>
            Print some info to the report.
            </summary>
            <param name="message">Info text</param>
            <param name="vars">Optional vars to print</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_PROPERTY``1(System.String,``0)">
            <summary>
            Add an element to the property collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_FAIL(System.String,System.String,System.Int32)">
            <summary>
            Always fail.
            </summary>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_TRUE(System.Boolean,System.String,System.Int32)">
            <summary>
            Checks whether the given condition is true.
            </summary>
            <param name="condition"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_FALSE(System.Boolean,System.String,System.Int32)">
            <summary>
            Checks whether the given condition is false.
            </summary>
            <param name="condition"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_NULL(System.Object,System.String,System.Int32)">
            <summary>
            Checks whether the given object is null.
            </summary>
            <param name="obj"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_NOT_NULL(System.Object,System.String,System.Int32)">
            <summary>
            Checks whether the given object is not null.
            </summary>
            <param name="obj"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_ASSERT``1(``0,``0,System.String,System.Int32)">
            <summary>
            Prints the condition and gens assert/exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_NOT_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is not equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_LESS``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is less than the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_LESS_OR_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is less than or equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_GREATER``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is greater than the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_GREATER_OR_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is greater than or equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_CLOSE(System.Double,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is within the given tolerance from the second parameter.
            This is useful for comparing floating point values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance">Absolute</param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.PNUT.TestSuite.UT_STRING_CONTAINS(System.String,System.String,System.String,System.Int32)">
            <summary>
            Check for part of a string.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="F:Ephemera.NBagOfTricks.SettingsCore._fp">
            <summary>The fully  qualified file path.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.SettingsCore.Load(System.String,System.Type,System.String)">
            <summary>
            Create object from file.
            </summary>
            <param name="dir">Where the file lives.</param>
            <param name="t">Derived type please.</param>
            <param name="fn">The file name, default is settings.json.</param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.SettingsCore.Save">
            <summary>
            Save object to file.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.SettingsCore.UpdateMru(System.String)">
            <summary>
            Update the RecentFiles.
            </summary>
            <param name="newVal">New value to insert.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.SettingsCore.CleanMru">
            <summary>
            Remove duplicate and invalid file names.
            </summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.LogLevel">
            <summary>Log level options.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.LogEntry">
            <summary>Internal log entry data container.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.LogEntry.#ctor(System.DateTime,Ephemera.NBagOfTricks.LogLevel,System.String,System.String,System.Int32,System.String)">
            <summary>Internal log entry data container.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.LogMessageEventArgs">
            <summary>Log event for notification.</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.Scoper">
            <summary>Experimental class to log enter/exit scope. Use syntax "using new Scoper(...);"</summary>
        </member>
        <member name="T:Ephemera.NBagOfTricks.LogManager">
            <summary>Global server.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._instance">
            <summary>Lazy singleton. https://csharpindepth.com/Articles/Singleton.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._loggers">
            <summary>All loggers. Key is client supplied name.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._queue">
            <summary>Log record queue.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._housekeepTime">
            <summary>For checking file rollover.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._levelNames">
            <summary>Constant width strings for visual aid.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._running">
            <summary>Queue management.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.LogManager._tokenSource">
            <summary>Queue management.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.LogManager.Instance">
            <summary>Singleton accessor.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.LogManager.MinLevelFile">
            <summary>Event filter for file.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.LogManager.MinLevelNotif">
            <summary>Event filter for callback event.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.LogManager.TimeFormat">
            <summary>Format for file records.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.LogManager.QueueSize">
            <summary>For diagnostics.</summary>
        </member>
        <member name="E:Ephemera.NBagOfTricks.LogManager.LogMessage">
            <summary>Callback event.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.LogManager.CreateLogger(System.String)">
            <summary>
            Create a new client side logger.
            </summary>
            <param name="name">Logger ID. Can be shared.</param>
            <returns>Minty fresh logger.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.LogManager.Run(System.String,System.Int32)">
            <summary>
            Inititialize builtin file logger.
            </summary>
            <param name="logFilePath">Builtin logger file path.</param>
            <param name="logSize">Builtin logger max size. 0 means no file logger, just notifications.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.LogManager.Flush">
            <summary>
            Flush queue.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.LogManager.Stop">
            <summary>
            Be polite, shut it down.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.LogManager.LogThis(Ephemera.NBagOfTricks.LogEntry)">
            <summary>
            Client logger wants to log something.
            </summary>
            <param name="le"></param>
        </member>
        <member name="T:Ephemera.NBagOfTricks.Logger">
            <summary>Client creates as many of these as needed.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.Logger.Name">
            <summary>ID for this logger.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.Logger.Enable">
            <summary>Turn logger on or off.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Client assigned name.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Log(Ephemera.NBagOfTricks.LogLevel,System.String,System.String,System.Int32)">
            <summary>
            General function.
            </summary>
            <param name="level">Log level.</param>
            <param name="msg">Content.</param>
            <param name="file">Ignore - compiler use.</param>
            <param name="line">Ignore - compiler use.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Trace(System.String,System.String,System.Int32)">
            <summary>
            Convenience function.
            </summary>
            <param name="msg">Content.</param>
            <param name="file">Ignore - compiler use.</param>
            <param name="line">Ignore - compiler use.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Debug(System.String,System.String,System.Int32)">
            <summary>
            Convenience function.
            </summary>
            <param name="msg">Content.</param>
            <param name="file">Ignore - compiler use.</param>
            <param name="line">Ignore - compiler use.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Info(System.String,System.String,System.Int32)">
            <summary>
            Convenience function.
            </summary>
            <param name="msg">Content.</param>
            <param name="file">Ignore - compiler use.</param>
            <param name="line">Ignore - compiler use.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Warn(System.String,System.String,System.Int32)">
            <summary>
            Convenience function.
            </summary>
            <param name="msg">Content.</param>
            <param name="file">Ignore - compiler use.</param>
            <param name="line">Ignore - compiler use.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Error(System.String,System.String,System.Int32)">
            <summary>
            Convenience function.
            </summary>
            <param name="msg">Content.</param>
            <param name="file">Ignore - compiler use.</param>
            <param name="line">Ignore - compiler use.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.Exception(System.Exception,System.String)">
            <summary>
            Log a caught exception. Adds info about who raised it
            </summary>
            <param name="ex">The exception.</param>
            <param name="msg">Extra info.</param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.Logger.AddEntry(Ephemera.NBagOfTricks.LogLevel,System.String,System.String,System.Int32)">
            <summary>
            Private common function.
            </summary>
            <param name="level"></param>
            <param name="msg"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="T:Ephemera.NBagOfTricks.StringUtils">
            <summary>
            Misc string extension methods.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.IsInteger(System.String)">
            <summary>
            Test for integer string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.IsFloat(System.String)">
            <summary>
            Test for float string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.IsAlpha(System.String)">
            <summary>
            Test for alpha string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.IsReadable(System.Byte)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.Right(System.String,System.Int32)">
            <summary>
            Returns the rightmost characters of a string based on the number of characters specified.
            </summary>
            <param name="str">The source string to return characters from.</param>
            <param name="numChars">The number of rightmost characters to return.</param>
            <returns>The rightmost characters of a string.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.Left(System.String,System.Int32)">
            <summary>
            Returns the leftmost number of chars in the string.
            </summary>
            <param name="str">The source string .</param>
            <param name="numChars">The number of characters to get from the source string.</param>
            <returns>The leftmost number of characters to return from the source string supplied.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.SplitByTokens(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="tokens">The char token(s) to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.SplitByToken(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="splitby">The string to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.SplitKeepDelims(System.String,System.String)">
            <summary>
            Split by any of the delims but keep the delim.
            </summary>
            <param name="s"></param>
            <param name="delims"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.SplitQuotedString(System.String)">
            <summary>
            Specialized splitter, mainly for cmd line args.
            Input: 12345 "I HAVE SPACES" aaa bbb  "me too" ccc ddd "  and the last  "
            Output: 12345,I HAVE SPACES,aaa,bbb,me too,ccc,ddd,and the last
            </summary>
            <param name="text"></param>
            <returns>Properly split values</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.Contains(System.String,System.Char)">
            <summary>
            Because .NET framework doesn't have this.
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.StringUtils.FormatSpecifier(System.Single)">
            <summary>
            Gets the format specifier based upon the range of data.
            </summary>
            <param name="range">Data range</param>
            <returns>Format specifier</returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.TimeIt">
            <summary>Simple/cheap profiling.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimeIt.Snap(System.String)">
            <summary>
            Measure one time.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimeIt.FormatTicks(System.Int64)">
            <summary>
            Conversion for stopwatch values.
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="T:Ephemera.NBagOfTricks.TimingAnalyzer">
            <summary>
            Diagnostics for timing measurement and analysis.
            </summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.TimingAnalyzer._watch">
            <summary>The internal timer.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.TimingAnalyzer._lastTicks">
            <summary>Last grab time for calculating diff.</summary>
        </member>
        <member name="F:Ephemera.NBagOfTricks.TimingAnalyzer._skipCount">
            <summary>Delay at start.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.SampleSize">
            <summary>Number of data points to grab for statistics.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.Skip">
            <summary>Number of initial data points to exclude from stats.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.Times">
            <summary>Accumulated data points.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.Mean">
            <summary>Mean in msec.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.Min">
            <summary>Min in msec.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.Max">
            <summary>Max in msec.</summary>
        </member>
        <member name="P:Ephemera.NBagOfTricks.TimingAnalyzer.SD">
            <summary>SD in msec.</summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.ToString">
            <summary>
            Make readable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.Stop">
            <summary>
            Stop accumulator.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.Arm">
            <summary>
            Execute this before measuring the duration of something.
            </summary>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.ReadOne">
            <summary>
            Do one read since Arm().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.Grab">
            <summary>
            Grab a data point. Also auto starts the timer.
            </summary>
            <returns>New stats are available.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.Dump">
            <summary>
            Detail of captured values.
            </summary>
            <returns>String csv.</returns>
        </member>
        <member name="M:Ephemera.NBagOfTricks.TimingAnalyzer.TicksToMsec(System.Int64)">
            <summary>
            Conversion for stopwatch values.
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
    </members>
</doc>
