<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NBagOfTricks</name>
    </assembly>
    <members>
        <member name="T:NBagOfTricks.ArgOptType">
            <summary>Argument and value options: None, required, optional.</summary>
        </member>
        <member name="T:NBagOfTricks.Processor">
            <summary>Main processor.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.ArgumentPrefix">
            <summary>Denotes the start of an argument name.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.Commands">
            <summary>All the commands.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.CommandName">
            <summary>Selected command name.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.Errors">
            <summary>Missing args etc.</summary>
        </member>
        <member name="M:NBagOfTricks.Processor.Parse(System.String,System.Boolean)">
            <summary>
            Parse the cmd string using our definitions.
            </summary>
            <param name="cmdString">String to parse.</param>
            <param name="skipFirst">Ignore first string, usually the exe name.</param>
            <returns>The main command name or empty if failed.</returns>
        </member>
        <member name="M:NBagOfTricks.Processor.GetUsage(System.String)">
            <summary>Format the usage help text.</summary>
            <param name="scmd">Specific command or list of commands if empty.</param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.Command">
            <summary>One possible command.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.Name">
            <summary>
            The command name(s) space separated. The first one is the main command name and aliases follow.
            If it's empty or null, there is no separate command name.
            </summary>
        </member>
        <member name="P:NBagOfTricks.Command.Description">
            <summary>For usage.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.Args">
            <summary>Possible arguments for this command.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.FileFunc">
            <summary>Handler for processing stuff at the end, typically file names.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.Errors">
            <summary>Missing args etc.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.NameParts">
            <summary>Split version of Name.</summary>
        </member>
        <member name="M:NBagOfTricks.Command.Parse(System.Collections.Generic.List{System.String})">
            <summary>Parse the argument collection.</summary>
        </member>
        <member name="T:NBagOfTricks.Argument">
            <summary>Client fills in specs and CommandParser does the rest.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.Name">
            <summary>The command line value.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.Description">
            <summary>For usage.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.ArgOpt">
            <summary>Argument options.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.ValOpt">
            <summary>Value options.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.ArgFunc">
            <summary>How to process the arg. Can include validation - returns true/false.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.Valid">
            <summary>Does it appear in the command line.</summary>
        </member>
        <member name="T:NBagOfTricks.Commands">
            <summary>Specialized container. Has Add() to support initialization.</summary>
        </member>
        <member name="M:NBagOfTricks.Commands.Add(System.String,System.String,NBagOfTricks.Arguments,System.Func{System.String,System.Boolean})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="desc"></param>
            <param name="args"></param>
            <param name="func"></param>
        </member>
        <member name="T:NBagOfTricks.Arguments">
            <summary>Specialized container. Has Add() to support initialization.</summary>
        </member>
        <member name="M:NBagOfTricks.Arguments.Add(System.String,System.String,NBagOfTricks.ArgOptType,NBagOfTricks.ArgOptType,System.Func{System.String,System.Boolean})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="desc"></param>
            <param name="argopt"></param>
            <param name="valopt"></param>
            <param name="func"></param>
        </member>
        <member name="T:NBagOfTricks.Dumper">
            <summary>
            Dumps: objects, dictionaries of objects, or lists of objects.
            Output format is modified json.
            </summary>
        </member>
        <member name="F:NBagOfTricks.Dumper._writer">
            <summary>Output writer.</summary>
        </member>
        <member name="F:NBagOfTricks.Dumper._indent">
            <summary>Output indent.</summary>
        </member>
        <member name="F:NBagOfTricks.Dumper._indentSize">
            <summary>Output indent size.</summary>
        </member>
        <member name="M:NBagOfTricks.Dumper.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Output stream</param>
        </member>
        <member name="M:NBagOfTricks.Dumper.Write(System.Object)">
            <summary>
            Top level writer.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:NBagOfTricks.Dumper.Write(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Write a dictionary of objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:NBagOfTricks.Dumper.Write(System.Collections.Generic.List{System.Object})">
            <summary>
            Write a list of objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:NBagOfTricks.Dumper.WriteIndented(System.String)">
            <summary>
            Common output formatter.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:NBagOfTricks.JsonColorConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:NBagOfTricks.JsonPointFConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:NBagOfTricks.JsonRectangleConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:NBagOfTricks.JsonFontConverter">
            <summary>Serialize prettier.</summary>
        </member>
        <member name="T:NBagOfTricks.MathUtils">
            <summary>
            Static math utility functions.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MathUtils.InitRand(System.Int32)">
            <summary>
            Seed the randomizer.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RandStr(System.Int32)">
            <summary>
            Get a random alphanumeric string.
            </summary>
            <param name="num">String length.</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RandRange(System.Int32,System.Int32)">
            <summary>
            Get the next random integer in the range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RandRange(System.Double,System.Double)">
            <summary>
            Get the next random double in the range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.IsClose(System.Double,System.Double,System.Double)">
            <summary>
            Compare two doubles "close enough".
            </summary>
        </member>
        <member name="M:NBagOfTricks.MathUtils.SplitDouble(System.Double)">
            <summary>
            Split a double into two parts: each side of the dp.
            </summary>
            <param name="val"></param>
            <returns>tuple of integral and fractional</returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.DegreesToRadians(System.Double)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RadiansToDegrees(System.Double)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Map(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Standard Deviation based on a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Standard Deviation</returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.SumOfSquares(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Sum of Squares given a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Sum of Squares</returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RMS(System.Single[])">
            <summary>
            The root mean square value of a quantity is the square root of the mean value of the squared values of the quantity taken over an interval.
            </summary>
            <param name="inputArray"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
            Generates normally distributed numbers.
            </summary>
            <param name="r"></param>
            <param name="mean">Mean</param>
            <param name="sigma">Sigma</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Constrain(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Constrain(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Ensure integral multiple of resolution, GTE min, LTE max.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.DecPlaces(System.Double)">
            <summary>
            Figure a reasonable number of dps to print based on value range.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.MiscUtils">
            <summary>
            Static general utility functions.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.GetVersionString">
            <summary>
            Returns a string with the application version information.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.GetAppDataDir(System.String,System.String)">
            <summary>
            Get the user app dir. Creates it if it doesn't exist.
            </summary>
            <param name="appName"></param>
            <param name="company">Optionally nest under company name.</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.GetSourcePath(System.String)">
            <summary>
            Get the dir name of the caller's source file.
            </summary>
            <param name="callerPath"></param>
            <returns>Caller source dir.</returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.ShowReadme(System.String)">
            <summary>
            Display the application readme.
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.SecondsToTimeSpan(System.Double)">
            <summary>
            Convert time to TimeSpan.
            </summary>
            <param name="sec">Time in seconds.</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.TimeSpanToSeconds(System.TimeSpan)">
            <summary>
            Convert TimeSpan to time.
            </summary>
            <param name="ts"></param>
            <returns>Time in seconds.</returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.Subset``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get a subset of an array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.InvokeIfRequired``1(``0,NBagOfTricks.MiscUtils.InvokeIfRequiredDelegate{``0})">
            <summary>
            Invoke helper. See http://stackoverflow.com/a/29497681
            Usage:
            progressBar1.InvokeIfRequired(o => 
            {
                o.Style = ProgressBarStyle.Marquee;
                o.MarqueeAnimationSpeed = 40;
            });
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            Each element's index is used in the logic of the action.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element; the second parameter
            of the action represents the index of the source element.</param>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx">
            <summary>
            The win multimedia timer is erratic. Using a one msec tick (fastest), the measured interval is +-100 us.
            Also note that it takes about 10 ticks to settle down after start.
            This component attempts to reduce the error by running at one msec and managing the requested periods manually.
            This is accomplished by using a Stopwatch to actually measure the elapsed time rather than trust the mm timer period.
            It seems to be an improvement.
            </summary>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.TimeProc">
            <summary>Client callback occurs when the time period has elapsed.</summary>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.TimerInstance">
            <summary>Tracking instances of client timers.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerInstance.period">
            <summary>The requested time between events in msec.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerInstance.handler">
            <summary>User handler.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerInstance.elapsed">
            <summary>Actual accumulated msec since last event.</summary> 
        </member>
        <member name="P:NBagOfTricks.MmTimerEx.Running">
            <summary>Indicates whether or not the timer is running.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._timers">
            <summary>All the timer instances. Key is id.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._sw">
            <summary>Used for more accurate timing.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._timerID">
            <summary>Multimedia timer identifier. -1 is not inited, 0 is fail to init, other is valid id.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._startTicks">
            <summary>Stopwatch support.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._lastTicks">
            <summary>Stopwatch support.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.MMTIMER_PERIOD">
            <summary>Msec for mm timer tick.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._timeProc">
            <summary>Called by Windows when a mm timer event occurs.</summary>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.NativeMethods">
            <summary>Win32 Multimedia Timer Functions.</summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.NativeMethods.timeGetDevCaps(NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps@,System.Int32)">
            <summary></summary>
            <param name="caps"></param>
            <param name="sizeOfTimerCaps"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.NativeMethods.timeSetEvent(System.Int32,System.Int32,NBagOfTricks.MmTimerEx.NativeMethods.TimeProc,System.IntPtr,System.Int32)">
            <summary>Start her up.</summary>
            <param name="delay">Event delay, in milliseconds.If this value is not in the range of the minimum and maximum event delays supported by the timer, the function returns an error.</param>
            <param name="resolution">Resolution of the timer event, in milliseconds. The resolution increases with smaller values; a resolution of 0 indicates periodic events should occur with the greatest possible accuracy. To reduce system overhead, however, you should use the maximum value appropriate for your application.</param>
            <param name="proc">Pointer to a callback function that is called once upon expiration of a single event or periodically upon expiration of periodic events.</param>
            <param name="user">User-supplied callback data.</param>
            <param name="mode">Timer event type.</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.NativeMethods.timeKillEvent(System.Int32)">
            <summary></summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.NativeMethods.TimeProc">
            <summary>Called by Windows when a mm timer event occurs.</summary>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps">
            <summary>Represents information about the multimedia timer capabilities.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps.periodMin">
            <summary>Minimum supported period in milliseconds.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.NativeMethods.TimerCaps.periodMax">
            <summary>Maximum supported period in milliseconds.</summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.SetTimer(System.Int32,NBagOfTricks.MmTimerEx.TimeProc)">
            <summary>
            Add or update a timer instance.
            </summary>
            <param name="period">Period in msec </param>
            <param name="handler">Client callback</param>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Start">
            <summary>
            Starts the periodic timer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Stop">
            <summary>
            Stops timer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.MmTimerCallback(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            System multimedia timer callback. Don't trust the accuracy of the mm timer so measure actual using a stopwatch.
            </summary>
            <param name="id">The identifier of the timer. The identifier is returned by the timeSetEvent function.</param>
            <param name="msg">Reserved.</param>
            <param name="user">The value that was specified for the dwUser parameter of the timeSetEvent function.</param>
            <param name="param1">Reserved.</param>
            <param name="param2">Reserved.</param>
        </member>
        <member name="T:NBagOfTricks.MultiFileWatcher">
            <summary>
            A watcher for multiple file changes. The underlying FileSystemWatcher is a bit sensitive to OS file system ops.
            </summary>
        </member>
        <member name="T:NBagOfTricks.MultiFileWatcher.FileChangeEventArgs">
            <summary>Reporting a change to listeners.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._watchers">
            <summary>Detect changed files.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._timer">
            <summary>Used to delay reporting to client as there can be multiple events for one file change.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._touchedFiles">
            <summary>Set by subordinate watchers.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher.DELAY">
            <summary>The delay before reporting. Seems like a reasonable number for human edit interface.</summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handle timer tick. Sends event out if any constituents triggered.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Add(System.String)">
            <summary>
            Add a new listener.
            </summary>
            <param name="path"></param>
            <return>Pass/fail</return>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Clear">
            <summary>
            Remove all listeners.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handle underlying change notification.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Dispose">
            <summary>
            Resource clean up.
            </summary>
        </member>
        <member name="T:NBagOfTricks.StringUtils">
            <summary>
            Misc string extension methods.
            </summary>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsInteger(System.String)">
            <summary>
            Test for integer string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsFloat(System.String)">
            <summary>
            Test for float string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsAlpha(System.String)">
            <summary>
            Test for alpha string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsReadable(System.Byte)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.Right(System.String,System.Int32)">
            <summary>
            Returns the rightmost characters of a string based on the number of characters specified.
            </summary>
            <param name="str">The source string to return characters from.</param>
            <param name="numChars">The number of rightmost characters to return.</param>
            <returns>The rightmost characters of a string.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.Left(System.String,System.Int32)">
            <summary>
            Returns the leftmost number of chars in the string.
            </summary>
            <param name="str">The source string .</param>
            <param name="numChars">The number of characters to get from the source string.</param>
            <returns>The leftmost number of characters to return from the source string supplied.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitByTokens(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="tokens">The char token(s) to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitByToken(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="splitby">The string to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitKeepDelims(System.String,System.String)">
            <summary>
            Split by any of the delims but keep the delim.
            </summary>
            <param name="s"></param>
            <param name="delims"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitQuotedString(System.String)">
            <summary>
            Specialized splitter, mainly for cmd line args.
            Input: 12345 "I HAVE SPACES" aaa bbb  "me too" ccc ddd "  and the last  "
            Output: 12345,I HAVE SPACES,aaa,bbb,me too,ccc,ddd,and the last
            </summary>
            <param name="text"></param>
            <returns>Properly split values</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.Contains(System.String,System.Char)">
            <summary>
            Because .NET framework doesn't have this.
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.UpdateMru(System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            Update the MRU.
            </summary>
            <param name="mruList">The MRU.</param>
            <param name="newVal">New value(s) to perhaps insert.</param>
            <param name="mruSize">Optional max size.</param>
        </member>
        <member name="M:NBagOfTricks.StringUtils.FormatSpecifier(System.Single)">
            <summary>
            Gets the format specifier based upon the range of data.
            </summary>
            <param name="range">Data range</param>
            <returns>Format specifier</returns>
        </member>
        <member name="T:NBagOfTricks.TimingAnalyzer">
            <summary>
            Diagnostics for timing measurement.
            </summary>
        </member>
        <member name="F:NBagOfTricks.TimingAnalyzer._watch">
            <summary>The internal timer.</summary>
        </member>
        <member name="F:NBagOfTricks.TimingAnalyzer._lastTicks">
            <summary>Last grab time for calculating diff.</summary>
        </member>
        <member name="F:NBagOfTricks.TimingAnalyzer._skipCount">
            <summary>Delay at start.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.SampleSize">
            <summary>Number of data points to grab for statistics.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Skip">
            <summary>Number of initial data points to exclude from stats.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Times">
            <summary>Accumulated data points.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Mean">
            <summary>Mean in msec.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Min">
            <summary>Min in msec.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Max">
            <summary>Max in msec.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.SD">
            <summary>SD in msec.</summary>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.ToString">
            <summary>
            Make readable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.Stop">
            <summary>
            Stop accumulator.
            </summary>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.Arm">
            <summary>
            Execute this before measuring the duration of something.
            </summary>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.ReadOne">
            <summary>
            Do one read since Arm().
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.Grab">
            <summary>
            Grab a data point. Also auto starts the timer.
            </summary>
            <returns>New stats are available.</returns>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.TicksToMsec(System.Int64)">
            <summary>
            Conversion for stopwatch values.
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.Tools">
            <summary>
            Higher level than Utils.
            </summary>
        </member>
        <member name="M:NBagOfTricks.Tools.SniffBin(System.String,System.Int32)">
            <summary>
            Reports non-ascii characters in a file. UTF-8 only.
            </summary>
            <param name="fn"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.Tools.MarkdownToHtml(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Convert list of markdown lines to html.
            </summary>
            <param name="body">The md text.</param>
            <param name="bgcolor">Background color for page.</param>
            <param name="font">Main font-family.</param>
            <param name="show">If true open in browser.</param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.PNUT.OutputFormat">
            <summary>
            Generate a human readable or junit format output.
            </summary>
        </member>
        <member name="T:NBagOfTricks.PNUT.TestContext">
            <summary>
            Accumulates general test info.
            </summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.Format">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.CurrentSuiteId">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.CurrentSuitePass">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.NumSuitesRun">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.NumSuitesFailed">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.CurrentCasePass">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.NumCasesRun">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.NumCasesFailed">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.OutputLines">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestContext.PropertyLines">
            <summary></summary>
        </member>
        <member name="T:NBagOfTricks.PNUT.AssertException">
            <summary>
            Specific exception type.
            </summary>
        </member>
        <member name="T:NBagOfTricks.PNUT.TestRunner">
            <summary>
            The orchestrator of the test execution.
            </summary>
        </member>
        <member name="F:NBagOfTricks.PNUT.TestRunner.TIME_FORMAT">
            <summary>Format string.</summary>
        </member>
        <member name="F:NBagOfTricks.PNUT.TestRunner.DATE_TIME_FORMAT_MSEC">
            <summary>Format string.</summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestRunner.Context">
            <summary>The test context.</summary>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestRunner.#ctor(NBagOfTricks.PNUT.OutputFormat)">
            <summary>
            Normal constructor.
            </summary>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestRunner.RunSuites(System.String[])">
            <summary>
            Run selected cases.
            </summary>
            <param name="which">List of names of test cases to run. If the test case names begin with these values they will run.</param>
        </member>
        <member name="T:NBagOfTricks.PNUT.TestSuite">
            <summary>
            Defining class for an individual test suite.
            </summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestSuite.CaseCnt">
            <summary>Accumulated count.</summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestSuite.CaseFailCnt">
            <summary>Accumulated count.</summary>
        </member>
        <member name="P:NBagOfTricks.PNUT.TestSuite.Context">
            <summary>Common context info.</summary>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.RunSuite">
            <summary>
            All test case specifications must supply this.
            </summary>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.RecordResult(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Record a test result.
            </summary>
            <param name="pass"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.RecordProperty(System.String,System.String)">
            <summary>
            Record a property into the report.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.RecordVerbatim(System.String)">
            <summary>
            Record a verbatim text line into the report.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_INFO(System.String,System.Object[])">
            <summary>
            Print some info to the report.
            </summary>
            <param name="message">Info text</param>
            <param name="vars">Optional vars to print</param>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_PROPERTY``1(System.String,``0)">
            <summary>
            Add an element to the property collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_TRUE(System.Boolean,System.String,System.Int32)">
            <summary>
            Checks whether the given condition is true.
            </summary>
            <param name="condition"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_FALSE(System.Boolean,System.String,System.Int32)">
            <summary>
            Checks whether the given condition is false.
            </summary>
            <param name="condition"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_NULL(System.Object,System.String,System.Int32)">
            <summary>
            Checks whether the given object is null.
            </summary>
            <param name="obj"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_NOT_NULL(System.Object,System.String,System.Int32)">
            <summary>
            Checks whether the given object is not null.
            </summary>
            <param name="obj"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_ASSERT``1(``0,``0,System.String,System.Int32)">
            <summary>
            Prints the condition and gens assert/exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_NOT_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is not equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_LESS``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is less than the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_LESS_OR_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is less than or equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_GREATER``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is greater than the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_GREATER_OR_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is greater than or equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.PNUT.TestSuite.UT_CLOSE(System.Double,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is within the given tolerance from the second parameter.
            This is useful for comparing floating point values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance">Absolute</param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.ScriptCompiler.CompileResultType">
            <summary>General script result - error/warn etc.</summary>
        </member>
        <member name="T:NBagOfTricks.ScriptCompiler.CompileResult">
            <summary>General script result container.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.CompileResult.ResultType">
            <summary>Where it came from.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.CompileResult.SourceFile">
            <summary>Original source file.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.CompileResult.LineNumber">
            <summary>Original source line number. -1 means invalid or unknown.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.CompileResult.Message">
            <summary>Content.</summary>
        </member>
        <member name="T:NBagOfTricks.ScriptCompiler.FileContext">
            <summary>Parser helper class.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.FileContext.SourceFile">
            <summary>Current source file.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.FileContext.LineNumber">
            <summary>Current source line.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.FileContext.CodeLines">
            <summary>Accumulated script code lines.</summary>
        </member>
        <member name="T:NBagOfTricks.ScriptCompiler.ScriptCompilerCore">
            <summary>Parses/compiles script file(s).</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.WorkPath">
            <summary>Client needs to tell us this.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.IgnoreWarnings">
            <summary>Client needs to tell us this.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.SystemDlls">
            <summary>Default system dlls. Client can add or subtract.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.LocalDlls">
            <summary>App dlls.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.Usings">
            <summary>Additional using statements not supplied by dlls.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.Script">
            <summary>The compiled script.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.Results">
            <summary>Accumulated errors/results.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.SourceFiles">
            <summary>All active source files. Provided so client can monitor for external changes.</summary>
        </member>
        <member name="P:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.TempDir">
            <summary>Compile products are here.</summary>
        </member>
        <member name="F:NBagOfTricks.ScriptCompiler.ScriptCompilerCore._scriptName">
            <summary>Script info.</summary>
        </member>
        <member name="F:NBagOfTricks.ScriptCompiler.ScriptCompilerCore._initLines">
            <summary>Accumulated lines to go in the constructor.</summary>
        </member>
        <member name="F:NBagOfTricks.ScriptCompiler.ScriptCompilerCore._filesToCompile">
            <summary>Products of file preprocess. Key is generated file name.</summary>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.PreExecute">
            <summary>Hook to override.</summary>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.PostExecute">
            <summary>Hook to override.</summary>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.PreprocessFile(System.String,NBagOfTricks.ScriptCompiler.FileContext)">
            <summary>Hook to override.</summary>
            <param name="sline">Trimmed line</param>
            <param name="pcont">File context</param>
            <returns>True if handled</returns>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.Execute(System.String)">
            <summary>
            Run the Compiler.
            </summary>
            <param name="scriptfn">Fully qualified path to main file.</param>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.CompileNative(System.String)">
            <summary>
            The actual compiler driver.
            </summary>
            <returns>Compiled script</returns>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.PreprocessFile(NBagOfTricks.ScriptCompiler.FileContext)">
            <summary>
            Parse one file. Recursive to support nested include(fn).
            </summary>
            <param name="pcont">The parse context.</param>
            <returns>True if a valid file.</returns>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.GenTopOfFile(System.String)">
            <summary>
            Create the boilerplate file top stuff.
            </summary>
            <param name="fn">Source file name. Empty means it's an internal file.</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.ScriptCompiler.ScriptCompilerCore.GenBottomOfFile">
            <summary>
            Create the boilerplate file bottom stuff.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.SimpleIpc.ClientStatus">
            <summary>Possible outcomes.</summary>
        </member>
        <member name="T:NBagOfTricks.SimpleIpc.Client">
            <summary>Companion client to server. This runs in a new process.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Client._pipeName">
            <summary>Pipe name.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Client._log">
            <summary>My logger.</summary>
        </member>
        <member name="P:NBagOfTricks.SimpleIpc.Client.Error">
            <summary>Caller may be able to use this.</summary>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Client.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pipeName">Pipe name to use.</param>
            <param name="logfn"></param>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Client.Send(System.String,System.Int32)">
            <summary>
            Blocking send string.
            </summary>
            <param name="s">String to send.</param>
            <param name="timeout">Msec to wait for completion.</param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.SimpleIpc.MpLog">
            <summary>
            A simple logger which handles client calls from multiple processes/threads.
            This is not intended to be a general purpose logger but one that serves a specific purpose,
            to debug the SimpleIpc component.
            </summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.MpLog.MUTEX_GUID">
            <summary>File lock id.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.MpLog._filename">
            <summary>Which file.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.MpLog._category">
            <summary>For sorting.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.MpLog._maxSize">
            <summary>Rollover size.</summary>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.MpLog.#ctor(System.String,System.String)">
            <summary>
            Init the log file.
            </summary>
            <param name="filename">The file.</param>
            <param name="category">The category.</param>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.MpLog.Write(System.String,System.Boolean)">
            <summary>
            Add a line.
            </summary>
            <param name="s"></param>
            <param name="error">T/F</param>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.MpLog.Clear">
            <summary>
            Empty the log file.
            </summary>
        </member>
        <member name="T:NBagOfTricks.SimpleIpc.ConnectionStatus">
            <summary>Possible states/outcomes.</summary>
        </member>
        <member name="T:NBagOfTricks.SimpleIpc.ConnectionState">
            <summary>Per connection.</summary>
        </member>
        <member name="T:NBagOfTricks.SimpleIpc.ServerEventArgs">
            <summary>Notify client of some connection event.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Server._pipeName">
            <summary>Named pipe name.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Server._thread">
            <summary>The server thread.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Server._running">
            <summary>Flag to unblock the listen and end the thread.</summary>
        </member>
        <member name="E:NBagOfTricks.SimpleIpc.Server.ServerEvent">
            <summary>Something happened. Client will have to take care of thread issues.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Server._cancelEvent">
            <summary>The canceller.</summary>
        </member>
        <member name="F:NBagOfTricks.SimpleIpc.Server._log">
            <summary>My logger.</summary>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Server.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pipeName"></param>
            <param name="logfn"></param>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Server.Start">
            <summary>
            Run it.
            </summary>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Server.Stop">
            <summary>
            Stop the server - called from main.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Server.Dispose">
            <summary>
            Required.
            </summary>
        </member>
        <member name="M:NBagOfTricks.SimpleIpc.Server.ServerThread">
            <summary>
            Listen for client messages. Interruptible by setting _cancelEvent.
            </summary>
        </member>
    </members>
</doc>
