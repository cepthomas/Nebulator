<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NBagOfTricks</name>
    </assembly>
    <members>
        <member name="T:NBagOfTricks.Tools">
            <summary>
            Higher level than Utils.
            </summary>
        </member>
        <member name="M:NBagOfTricks.Tools.FormatSourceCode(System.Collections.Generic.List{System.String})">
            <summary>Rudimentary C# source code formatter to make generated files somewhat readable.</summary>
            <param name="src">Lines to prettify.</param>
            <returns>Formatted lines.</returns>
        </member>
        <member name="M:NBagOfTricks.Tools.SniffBin(System.String)">
            <summary>
            Reports non-ascii characters in a file. UTF-8 only.
            </summary>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.Tools.MarkdownToHtml(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:NBagOfTricks.OutputFormat">
            <summary>
            Generate a human readable or junit format output.
            </summary>
        </member>
        <member name="T:NBagOfTricks.TestContext">
            <summary>
            Accumulates general test info.
            </summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.Format">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.CurrentSuiteId">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.CurrentSuitePass">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.NumSuitesRun">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.NumSuitesFailed">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.CurrentCasePass">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.NumCasesRun">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.NumCasesFailed">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.OutputLines">
            <summary></summary>
        </member>
        <member name="P:NBagOfTricks.TestContext.PropertyLines">
            <summary></summary>
        </member>
        <member name="T:NBagOfTricks.AssertException">
            <summary>
            Specific exception type.
            </summary>
        </member>
        <member name="T:NBagOfTricks.TestRunner">
            <summary>
            The orchestrator of the test execution.
            </summary>
        </member>
        <member name="F:NBagOfTricks.TestRunner.TIME_FORMAT">
            <summary>Format string.</summary>
        </member>
        <member name="F:NBagOfTricks.TestRunner.DATE_TIME_FORMAT">
            <summary>Format string.</summary>
        </member>
        <member name="F:NBagOfTricks.TestRunner.DATE_TIME_FORMAT_MSEC">
            <summary>Format string.</summary>
        </member>
        <member name="P:NBagOfTricks.TestRunner.Context">
            <summary>The test context.</summary>
        </member>
        <member name="M:NBagOfTricks.TestRunner.#ctor(NBagOfTricks.OutputFormat)">
            <summary>
            Normal constructor.
            </summary>
        </member>
        <member name="M:NBagOfTricks.TestRunner.RunSuites(System.String[])">
            <summary>
            Run selected cases.
            </summary>
            <param name="which">List of names of test cases to run. If the test case names begin with these values they will run.</param>
        </member>
        <member name="T:NBagOfTricks.TestSuite">
            <summary>
            Defining class for an individual test suite.
            </summary>
        </member>
        <member name="P:NBagOfTricks.TestSuite.CaseCnt">
            <summary>Accumulated count.</summary>
        </member>
        <member name="P:NBagOfTricks.TestSuite.CaseFailCnt">
            <summary>Accumulated count.</summary>
        </member>
        <member name="P:NBagOfTricks.TestSuite.Context">
            <summary>Common context info.</summary>
        </member>
        <member name="M:NBagOfTricks.TestSuite.RunSuite">
            <summary>
            All test case specifications must supply this.
            </summary>
        </member>
        <member name="M:NBagOfTricks.TestSuite.RecordResult(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Record a test result.
            </summary>
            <param name="pass"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:NBagOfTricks.TestSuite.RecordProperty(System.String,System.String)">
            <summary>
            Record a property into the report.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:NBagOfTricks.TestSuite.RecordVerbatim(System.String)">
            <summary>
            Record a verbatim text line into the report.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_INFO(System.String,System.Object[])">
            <summary>
            Print some info to the report.
            </summary>
            <param name="message">Info text</param>
            <param name="vars">Optional vars to print</param>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_PROPERTY``1(System.String,``0)">
            <summary>
            Add an element to the property collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_TRUE(System.Boolean,System.String,System.Int32)">
            <summary>
            Checks whether the given condition is true.
            </summary>
            <param name="condition"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_FALSE(System.Boolean,System.String,System.Int32)">
            <summary>
            Checks whether the given condition is false.
            </summary>
            <param name="condition"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_ASSERT``1(``0,``0,System.String,System.Int32)">
            <summary>
            Prints the condition and gens assert/exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_NOT_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is not equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_LESS``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is less than the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_LESS_OR_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is less than or equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_GREATER``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is greater than the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_GREATER_OR_EQUAL``1(``0,``0,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is greater than or equal to the second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TestSuite.UT_CLOSE(System.Double,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Checks whether the first parameter is within the given tolerance from the second parameter.
            This is useful for comparing floating point values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <param name="file"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.ArgOptType">
            <summary>Argument and value options: None, required, optional.</summary>
        </member>
        <member name="T:NBagOfTricks.Processor">
            <summary>Main processor.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.ArgumentPrefix">
            <summary>Denotes the start of an argument name.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.Commands">
            <summary>All the commands.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.CommandName">
            <summary>Selected command name.</summary>
        </member>
        <member name="P:NBagOfTricks.Processor.Errors">
            <summary>Missing args etc.</summary>
        </member>
        <member name="M:NBagOfTricks.Processor.Parse(System.String,System.Boolean)">
            <summary>
            Parse the cmd string using our definitions.
            </summary>
            <param name="cmdString">String to parse.</param>
            <param name="skipFirst">Ignore first string, usually the exe name.</param>
            <returns>The main command name or empty if failed.</returns>
        </member>
        <member name="M:NBagOfTricks.Processor.GetUsage(System.String)">
            <summary>Format the usage help text.</summary>
            <param name="scmd">Specific command or list of commands if empty.</param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.Command">
            <summary>One possible command.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.Name">
            <summary>
            The command name(s). The first one is the main command name and aliases follow.
            If it's empty or null, there is no separate command name.
            </summary>
        </member>
        <member name="P:NBagOfTricks.Command.Description">
            <summary>For usage.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.Args">
            <summary>Possible arguments for this command.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.FileFunc">
            <summary>Handler for processing stuff at the end, typically file names.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.Errors">
            <summary>Missing args etc.</summary>
        </member>
        <member name="P:NBagOfTricks.Command.NameParts">
            <summary>Split version of Name.</summary>
        </member>
        <member name="M:NBagOfTricks.Command.Parse(System.Collections.Generic.List{System.String})">
            <summary>Parse the argument collection.</summary>
        </member>
        <member name="T:NBagOfTricks.Argument">
            <summary>Client fills in specs and CommandParser does the rest.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.Name">
            <summary>The command line value.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.Description">
            <summary>For usage.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.ArgOpt">
            <summary>Argument options.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.ValOpt">
            <summary>Value options.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.ArgFunc">
            <summary>How to process the arg. Can include validation - returns true/false.</summary>
        </member>
        <member name="P:NBagOfTricks.Argument.Valid">
            <summary>Does it appear in the command line.</summary>
        </member>
        <member name="T:NBagOfTricks.Commands">
            <summary>Specialized container. Has Add() to support initialization.</summary>
        </member>
        <member name="T:NBagOfTricks.Arguments">
            <summary>Specialized container. Has Add() to support initialization.</summary>
        </member>
        <member name="T:NBagOfTricks.Dumper">
            <summary>
            Dumps: objects, dictionaries of objects, or lists of objects.
            Output format is modified json.
            </summary>
        </member>
        <member name="F:NBagOfTricks.Dumper._writer">
            <summary>Output writer.</summary>
        </member>
        <member name="F:NBagOfTricks.Dumper._indent">
            <summary>Output indent.</summary>
        </member>
        <member name="F:NBagOfTricks.Dumper._indentSize">
            <summary>Output indent size.</summary>
        </member>
        <member name="M:NBagOfTricks.Dumper.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Output stream</param>
        </member>
        <member name="M:NBagOfTricks.Dumper.Write(System.Object)">
            <summary>
            Top level writer.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:NBagOfTricks.Dumper.Write(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Write a dictionary of objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:NBagOfTricks.Dumper.Write(System.Collections.Generic.List{System.Object})">
            <summary>
            Write a list of objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:NBagOfTricks.Dumper.WriteIndented(System.String)">
            <summary>
            Common output formatter.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:NBagOfTricks.MiscUtils">
            <summary>
            Static general utility functions.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.GetVersionString">
            <summary>
            Returns a string with the application version information.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.GetAppDataDir(System.String)">
            <summary>
            Get the user app dir.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.GetExeDir">
            <summary>
            Get the executable dir.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.SecondsToTimeSpan(System.Double)">
            <summary>
            Convert time to TimeSpan.
            </summary>
            <param name="sec">Time in seconds.</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.TimeSpanToSeconds(System.TimeSpan)">
            <summary>
            Convert TimeSpan to time.
            </summary>
            <param name="ts"></param>
            <returns>Time in seconds.</returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.DeepClone``1(``0)">
            <summary>
            Perform a blind deep copy of an object. The class must be marked as [Serializable] in order for this to work.
            There are many ways to do this: http://stackoverflow.com/questions/129389/how-do-you-do-a-deep-copy-an-object-in-net-c-specifically/11308879
            The binary serialization is apparently slower but safer. Feel free to reimplement with a better way.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.Subset``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get a subset of an array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.InvokeIfRequired``1(``0,NBagOfTricks.MiscUtils.InvokeIfRequiredDelegate{``0})">
            <summary>
            Invoke helper. See http://stackoverflow.com/a/29497681
            Usage:
            progressBar1.InvokeIfRequired(o => 
            {
                o.Style = ProgressBarStyle.Marquee;
                o.MarqueeAnimationSpeed = 40;
            });
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:NBagOfTricks.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            Each element's index is used in the logic of the action.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element; the second parameter
            of the action represents the index of the source element.</param>
        </member>
        <member name="T:NBagOfTricks.StringUtils">
            <summary>
            Misc string extension methods.
            </summary>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsInteger(System.String)">
            <summary>
            Test for integer string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsFloat(System.String)">
            <summary>
            Test for float string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsAlpha(System.String)">
            <summary>
            Test for alpha string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.IsReadable(System.Byte)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.Right(System.String,System.Int32)">
            <summary>
            Returns the rightmost characters of a string based on the number of characters specified.
            </summary>
            <param name="str">The source string to return characters from.</param>
            <param name="numChars">The number of rightmost characters to return.</param>
            <returns>The rightmost characters of a string.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.Left(System.String,System.Int32)">
            <summary>
            Returns the leftmost number of chars in the string.
            </summary>
            <param name="str">The source string .</param>
            <param name="numChars">The number of characters to get from the source string.</param>
            <returns>The leftmost number of characters to return from the source string supplied.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitByTokens(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="tokens">The char token(s) to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitByToken(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="splitby">The string to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitKeepDelims(System.String,System.String)">
            <summary>
            Split by any of the delims but keep the delim.
            </summary>
            <param name="s"></param>
            <param name="delims"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.SplitQuotedString(System.String)">
            <summary>
            Specialized splitter, mainly for cmd line args.
            Input: 12345 "I HAVE SPACES" aaa bbb  "me too" ccc ddd "  and the last  "
            Output: 12345,I HAVE SPACES,aaa,bbb,me too,ccc,ddd,and the last
            </summary>
            <param name="text"></param>
            <returns>Properly split values</returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.Contains(System.String,System.Char)">
            <summary>
            Because .NET framework doesn't have this.
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.StringUtils.UpdateMru(System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            Update the MRU.
            </summary>
            <param name="mruList">The MRU.</param>
            <param name="newVal">New value(s) to perhaps insert.</param>
            <param name="mruSize">Optional max size.</param>
        </member>
        <member name="M:NBagOfTricks.StringUtils.FormatSpecifier(System.Single)">
            <summary>
            Gets the format specifier based upon the range of data.
            </summary>
            <param name="range">Data range</param>
            <returns>Format specifier</returns>
        </member>
        <member name="T:NBagOfTricks.MathUtils">
            <summary>
            Static math utility functions.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MathUtils.InitRand(System.Int32)">
            <summary>
            Seed the randomizer.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RandStr(System.Int32)">
            <summary>
            Get a random alphanumeric string.
            </summary>
            <param name="num">String length.</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RandRange(System.Int32,System.Int32)">
            <summary>
            Get the next random integer in the range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RandRange(System.Double,System.Double)">
            <summary>
            Get the next random double in the range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.IsClose(System.Double,System.Double,System.Double)">
            <summary>
            Compare two doubles "close enough".
            </summary>
        </member>
        <member name="M:NBagOfTricks.MathUtils.SplitDouble(System.Double)">
            <summary>
            Split a double into two parts: each side of the dp.
            </summary>
            <param name="val"></param>
            <returns>tuple of integral and fractional</returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.DegreesToRadians(System.Double)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.RadiansToDegrees(System.Double)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Map(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Standard Deviation based on a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Standard Deviation</returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.SumOfSquares(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Sum of Squares given a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Sum of Squares</returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
            Generates normally distributed numbers.
            </summary>
            <param name="r"></param>
            <param name="mean">Mean</param>
            <param name="sigma">Sigma</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MathUtils.Constrain(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx">
            <summary>
            The win multimedia timer is erratic. This class attempts to reduce the error by running at one msec
            and managing the requested periods manually. This is accomplished by using a Stopwatch to actually
            measure the elapsed time rather than trust the mm timer period. It seems to be an improvement.
            </summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerInstance.period">
            <summary>The time between events in msec.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerInstance.current">
            <summary>Accumulated msec.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._timers">
            <summary>All the timer instances. Key is id.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._sw">
            <summary>Used for more accurate timing.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._running">
            <summary>Indicates whether or not the timer is running.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._lastTicks">
            <summary>Stopwatch support.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._disposed">
            <summary>Indicates whether or not the timer has been disposed.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.MMTIMER_PERIOD">
            <summary>Msec for mm timer tick.</summary>
        </member>
        <member name="E:NBagOfTricks.MmTimerEx.TimerElapsedEvent">
            <summary>Occurs when the time period has elapsed.</summary>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.TimerEventArgs">
            <summary>FastTimer event args.</summary>
        </member>
        <member name="P:NBagOfTricks.MmTimerEx.TimerEventArgs.ElapsedTimers">
            <summary>Elapsed timers.</summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._timerID">
            <summary>
            Multimedia timer identifier.
            </summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._resolution">
            <summary>
            Timer resolution in milliseconds. The resolution increases with smaller values - a resolution of 0
            indicates periodic events should occur with the greatest possible accuracy. To reduce system 
            overhead, however, you should use the maximum value appropriate for your application.
            </summary>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.TimeProc">
            <summary>
            Called by Windows when a mm timer event occurs.
            </summary>
            <param name="id"></param>
            <param name="msg"></param>
            <param name="user"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx._timeProc">
            <summary>
            Called by Windows when a mm timer event occurs.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.timeSetEvent(System.Int32,System.Int32,NBagOfTricks.MmTimerEx.TimeProc,System.IntPtr,System.Int32)">
            <summary>Start her up.</summary>
            <param name="delay">Event delay, in milliseconds.If this value is not in the range of the minimum and maximum event delays supported by the timer, the function returns an error.</param>
            <param name="resolution">Resolution of the timer event, in milliseconds. The resolution increases with smaller values; a resolution of 0 indicates periodic events should occur with the greatest possible accuracy. To reduce system overhead, however, you should use the maximum value appropriate for your application.</param>
            <param name="proc">Pointer to a callback function that is called once upon expiration of a single event or periodically upon expiration of periodic events.</param>
            <param name="user">User-supplied callback data.</param>
            <param name="mode">Timer event type.</param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Dispose(System.Boolean)">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.SetTimer(System.String,System.Int32)">
            <summary>
            Add a new timer instance.
            </summary>
            <param name="id">Arbitrary id as string</param>
            <param name="period">Period in msec </param>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Start">
            <summary>
            Starts the periodic timer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.Stop">
            <summary>
            Stops timer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MmTimerEx.MmTimerCallback(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Multimedia timer callback. Don't trust the accuracy of the mm timer so measure actual using a stopwatch.
            </summary>
            <param name="id">The identifier of the timer. The identifier is returned by the timeSetEvent function.</param>
            <param name="msg">Reserved.</param>
            <param name="user">The value that was specified for the dwUser parameter of the timeSetEvent function.</param>
            <param name="param1">Reserved.</param>
            <param name="param2">Reserved.</param>
        </member>
        <member name="T:NBagOfTricks.MmTimerEx.TimerCaps">
            <summary>
            Represents information about the multimedia timer capabilities.
            </summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerCaps.periodMin">
            <summary>
            Minimum supported period in milliseconds.
            </summary>
        </member>
        <member name="F:NBagOfTricks.MmTimerEx.TimerCaps.periodMax">
            <summary>
            Maximum supported period in milliseconds.
            </summary>
        </member>
        <member name="T:NBagOfTricks.MultiFileWatcher">
            <summary>
            A watcher for multiple file changes. The underlying FileSystemWatcher is a bit sensitive to OS file system ops.
            </summary>
        </member>
        <member name="T:NBagOfTricks.MultiFileWatcher.FileChangeEventArgs">
            <summary>Reporting a change to listeners.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._watchers">
            <summary>Detect changed files.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._timer">
            <summary>Used to delay reporting to client as there can be multiple events for one file change.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._touchedFiles">
            <summary>Set by subordinate watchers.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher.DELAY">
            <summary>The delay before reporting. Seems like a reasonable number for human edit interface.</summary>
        </member>
        <member name="F:NBagOfTricks.MultiFileWatcher._disposed">
            <summary>Resource clean up.</summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handle timer tick. Sends event out if any constituents triggered.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Add(System.String)">
            <summary>
            Add anew listener.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Clear">
            <summary>
            Remove all listeners.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handle underlying change notification.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Dispose">
            <summary>
            Resource clean up.
            </summary>
        </member>
        <member name="M:NBagOfTricks.MultiFileWatcher.Dispose(System.Boolean)">
            <summary>
            Resource clean up.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:NBagOfTricks.TimingAnalyzer">
            <summary>
            Diagnostics for timing measurement.
            </summary>
        </member>
        <member name="F:NBagOfTricks.TimingAnalyzer._watch">
            <summary>The internal timer.</summary>
        </member>
        <member name="F:NBagOfTricks.TimingAnalyzer._lastTicks">
            <summary>Last grab time for calculating diff.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.SampleSize">
            <summary>Number of data points to grab for statistics.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Times">
            <summary>Accumulated data points.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Mean">
            <summary>Mean in msec.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Min">
            <summary>Min in msec.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.Max">
            <summary>Max in msec.</summary>
        </member>
        <member name="P:NBagOfTricks.TimingAnalyzer.SD">
            <summary>SD in msec.</summary>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.ToString">
            <summary>
            Make readable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.Stop">
            <summary>
            Stop accumulator.
            </summary>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.Arm">
            <summary>
            Execute this before measuring the duration of something.
            </summary>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.ReadOne">
            <summary>
            Do one read since Arm().
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.Grab">
            <summary>
            Grab a data point. Also auto starts the timer.
            </summary>
            <returns>New stats are available.</returns>
        </member>
        <member name="M:NBagOfTricks.TimingAnalyzer.TicksToMsec(System.Int64)">
            <summary>
            Conversion for stopwatch values.
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="T:NBagOfTricks.ParserCore.ParseType">
            <summary>To capture or not.</summary>
        </member>
        <member name="P:NBagOfTricks.ParserCore.Column">
            <summary>Source file tracking.</summary>
        </member>
        <member name="P:NBagOfTricks.ParserCore.Line">
            <summary>Source file tracking.</summary>
        </member>
        <member name="P:NBagOfTricks.ParserCore.TabWidth">
            <summary>Source file tracking.</summary>
        </member>
        <member name="P:NBagOfTricks.ParserCore.Current">
            <summary>Current character being processed.</summary>
        </member>
        <member name="P:NBagOfTricks.ParserCore.CaptureBuffer">
            <summary>Current captured.</summary>
        </member>
        <member name="P:NBagOfTricks.ParserCore.Errors">
            <summary>Parse erros collected.</summary>
        </member>
        <member name="F:NBagOfTricks.ParserCore._reader">
            <summary>Raw file input.</summary>
        </member>
        <member name="F:NBagOfTricks.ParserCore._inIndex">
            <summary></summary>
        </member>
        <member name="F:NBagOfTricks.ParserCore.HEX_DIGITS">
            <summary></summary>
        </member>
        <member name="F:NBagOfTricks.ParserCore.LINE_END">
            <summary>Win uses "\r\n", nx uses "\n". This guarantees eol.</summary>
        </member>
        <member name="M:NBagOfTricks.ParserCore.#ctor(System.IO.TextReader)">
            <summary>
            Main constructor.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.Parse">
            <summary>
            Derived classes must implement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.Advance(System.String)">
            <summary>
            Processes the input queue one char at a time. Does internal boilerplate stuff.
            </summary>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ClearCapture">
            <summary>
            Reset capture buffer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.ParserCore.CaptureCurrent">
            <summary>
            Add the Current value to the capture buffer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.ParserCore.Capture(System.Char)">
            <summary>
            Add the value to the capture buffer.
            </summary>
        </member>
        <member name="M:NBagOfTricks.ParserCore.Peek">
            <summary>
            Peekaboo one ahead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.Expecting(System.String)">
            <summary>
            Test for Current matching one of the chars in the expecting string.
            Throws an exception if not a match.
            </summary>
            <param name="expecting">Match values.</param>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumeUntilChar(System.String,NBagOfTricks.ParserCore.ParseType)">
            <summary>
            Captures up to but not including one of the values in the chars string.
            Current is left after the found char position.
            </summary>
            <param name="chars">Chars to match.</param>
            <param name="pt">Capture or skip option.</param>
            <returns>true if any found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumeUntilString(System.String,NBagOfTricks.ParserCore.ParseType)">
            <summary>
            Captures up to but not including the string.
            Current is left after the found string position.
            </summary>
            <param name="str">String to match.</param>
            <param name="pt">Capture or skip option.</param>
            <returns>true if any found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumeQuotedString(System.Boolean)">
            <summary>
            Captures a quoted string including escaped values.
            Current is left on value immediately after the string.
            </summary>
            <param name="inclQuotes">Option to keep or remove leading and trailing quotes.</param>
            <returns>true if string found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumeWhiteSpace">
            <summary>
            Skip over any whitespace.
            Current is left on value immediately after any.
            </summary>
            <returns>true if any found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumeCComment(NBagOfTricks.ParserCore.ParseType)">
            <summary>
            Capture or skip a C family comment. Supports single and multi line flavors.
            Current is left on value immediately after any.
            </summary>
            <param name="pt">Capture or skip option.</param>
            <returns>true if any found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumeLuaComment(NBagOfTricks.ParserCore.ParseType)">
            <summary>
            Capture or skip a Lua comment. Supports single and multi line flavors.
            Current is left on value immediately after any.
            </summary>
            <param name="pt">Capture or skip option.</param>
            <returns>true if any found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.ConsumePythonComment(NBagOfTricks.ParserCore.ParseType)">
            <summary>
            Capture or skip a Python comment. Supports single and multi line flavors.
            Current is left on value immediately after any.
            </summary>
            <param name="pt">Capture or skip option.</param>
            <returns>true if any found</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.CleanAll">
            <summary>
            Remove all whitespace and C comments.
            </summary>
            <returns>Cleaned string.</returns>
        </member>
        <member name="M:NBagOfTricks.ParserCore.IsHexChar(System.Char)">
            <summary>
            Test for hex value chars.
            </summary>
            <param name="hex">The char to test.</param>
            <returns>true if hex</returns>
        </member>
        <member name="T:NBagOfTricks.ParseException">
            <summary>Simple custom exception container.</summary>
        </member>
    </members>
</doc>
