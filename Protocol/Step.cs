using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Nebulator.Common;


namespace Nebulator.Protocol
{
    /// <summary>
    /// Base class for internal interface representation of a compiled event to be sent or received.
    /// </summary>
    public abstract class Step
    {
        /// <summary>Channel.</summary>
        public int Channel { get; set; } = 1;

        /// <summary>Possibly make adjustments to values.</summary>
        /// <param name="caps">What it can do.</param>
        /// <param name="masterVolume"></param>
        /// <param name="trackVolume"></param>
        /// <param name="modulate"></param>
        public virtual void Adjust(ProtocolCaps caps, int masterVolume, int trackVolume, int modulate) { }

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"Channel:{Channel}";
        }
    }

    /// <summary>
    /// One note on.
    /// </summary>
    public class StepNoteOn : Step
    {
        /// <summary>The default note.</summary>
        public int NoteNumber { get; set; }

        /// <summary>The possibly modified NoteNumber.</summary>
        public int NoteNumberToPlay { get; set; }

        /// <summary>The default volume.</summary>
        public int Velocity { get; set; } = 90;

        /// <summary>The possibly modified Volume.</summary>
        public int VelocityToPlay { get; set; } = 90;

        /// <summary>Time between note on/off. Default of 0 indicates note off generated by owner.</summary>
        public Time Duration { get; set; } = new Time(0);

        /// <inheritdoc />
        public override void Adjust(ProtocolCaps caps, int masterVolume, int trackVolume, int modulate)
        {
            // Maybe alter note velocity.
            int vel = Velocity * trackVolume * masterVolume / caps.MaxVolume / caps.MaxVolume;
            VelocityToPlay = Utils.Constrain(vel, 0, caps.MaxVolume);

            // Maybe alter note number.
            NoteNumberToPlay = Utils.Constrain(NoteNumber + modulate, caps.MinNote, caps.MaxNote);
        }

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepNoteOn: {base.ToString()} NoteNumberToPlay:{NoteNumberToPlay} VelocityToPlay:{VelocityToPlay} Duration:{Duration}";
        }
    }

    /// <summary>
    /// One note off.
    /// </summary>
    public class StepNoteOff : Step
    {
        /// <summary>The default note.</summary>
        public int NoteNumber { get; set; }

        /// <summary>The possibly modified NoteNumber.</summary>
        public int NoteNumberToPlay { get; set; }

        /// <summary>Velocity.</summary>
        public int Velocity { get; set; } = 64; // seems to be standard default.

        /// <summary>When it's done in tocks - used by stop note chasing.</summary>
        public int Expiry { get; set; } = -1;

        /// <inheritdoc />
        public override void Adjust(ProtocolCaps caps, int masterVolume, int trackVolume, int modulate)
        {
            // Maybe alter note number.
            NoteNumberToPlay = Utils.Constrain(NoteNumber + modulate, caps.MinNote, caps.MaxNote);
        }

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepNoteOff: {base.ToString()} NoteNumberToPlay:{NoteNumberToPlay}";
        }
    }

    /// <summary>
    /// One control change event. This supports
    ///   - standard CC messages
    ///   - pitch (rather than have a separate type)
    ///   - notes used as control inputs
    /// </summary>
    public class StepControllerChange : Step
    {
        /// <summary>Specific controller.</summary>
        public int ControllerId { get; set; } = 0;

        /// <summary>The payload.</summary>
        public int Value { get; set; } = 0;

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder($"StepControllerChange: {base.ToString()}");

            switch(ControllerId)
            {
                default: // normal
                    sb.Append($" ControllerId:{ControllerId} Value:{Value}");
                    break;

                case ControllerType.PITCH:
                    sb.Append($" Pitch:{Value}");
                    break;

                case ControllerType.NOTE:
                    sb.Append($" Note:{Value}");
                    break;
            }

            return sb.ToString();
        }
    }

    public class StepPatch : Step
    {
        /// <summary>Specific patch.</summary>
        public int PatchNumber { get; set; } = 0;

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepPatch: {base.ToString()} PatchNumber:{PatchNumber}";
        }
    }

    /// <summary>Used for internal things that are not actually comm.</summary>
    public class StepInternal : Step
    {
        /// <summary>A function to call.</summary>
        public Action ScriptFunction { get; set; } = null;

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepInternal: {base.ToString()} Function:{ScriptFunction}";
        }
    }
}
