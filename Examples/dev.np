
// Akai kbd midi: Pad1-8 are notes 44-51, knob1-8 are controllers ctlr1-8.


// All the neb variables.
NVariable BACK_COLOR;
NVariable MOD1;
NVariable KBD_NOTE;
NVariable VKBD_NOTE;
NVariable CTL2;
NVariable CTL3;

// All the output channels.
NChannel PIANO;
NChannel BASS;
NChannel SYNTH;
NChannel DRUMS;

// All the sequences
NSequence SEQ1;
NSequence DRUMS_SIMPLE;

// Sections.
NSection SECTION1;
NSection SECTION2;


// Neb script stuff.
double[] _chordNotes;
double[] _scaleNotes;
int _noteNum = 0;

// Index is integer note number, value is when to stop it.
int[] _notesPlaying = new int[128];


// Use win gm and virtual kbd only. Otherwise all midi.
bool _minimal = true;


string SYNTH_OUT = "OSC:127.0.0.1:1234";


public override void setup()
{
    // All the neb variables.
    CTL2 = createVariable("ctl2", 200, 0, 255, On_CTL2);
    CTL3 = createVariable("ctl3", 200, 0, 255, On_CTL3);
    BACK_COLOR = createVariable("color", 200, 0, 255, On_BACK_COLOR);
    MOD1 = createVariable("mod", 127, 0, 255, On_MOD1);
    KBD_NOTE = createVariable("note", 60, -127, 127, On_KBD_NOTE); // note neg number for note off encoding
    VKBD_NOTE = createVariable("note", 60, -127, 127, On_VKBD_NOTE);

    // IO devices.
    if(_minimal)
    {
        // All the outputs.
        string GS_MIDI_OUT = "MIDI:Microsoft GS Wavetable Synth";
        PIANO = createChannel("piano", GS_MIDI_OUT, 1);
        BASS = createChannel("bass", GS_MIDI_OUT, 2);
        SYNTH = createChannel("synth", GS_MIDI_OUT, 3);
        DRUMS = createChannel("drums", GS_MIDI_OUT, 10);

        // All the inputs.
        createController("VKEY:", 1, NoteControl, VKBD_NOTE);
    }
    else
    {
        // All the outputs.
        string MY_MIDI_OUT = "MIDI:loopMIDI Port 1";
        string MY_MIDI_IN = "MIDI:MPK mini";

        PIANO = createChannel("piano", MY_MIDI_OUT, 1);
        BASS = createChannel("bass", MY_MIDI_OUT, 2);
        SYNTH = createChannel("synth", MY_MIDI_OUT, 3);
        DRUMS = createChannel("drums", MY_MIDI_OUT, 10);

        createController(MY_MIDI_IN, 1, 1, MOD1); // modulate eq
        createController(MY_MIDI_IN, 1, 2, CTL2); // since I don't have a pitch knob, I'll use this instead
        createController(MY_MIDI_IN, 1, 3, CTL3); // another controller
        createController(MY_MIDI_IN, 1, 4, BACK_COLOR); // change ui color
        createController(MY_MIDI_IN, 1, NoteControl, KBD_NOTE);
    }

    setWobbler(PIANO, 0.2);
    setWobbler(BASS, 0.1);
    setWobbler(DRUMS, 0.1);

    // string MY_OSC_IN = "OSC:6448";
    // createController(MY_OSC_IN, 1, 1, MOD1); // modulate eq
    // createController(MY_OSC_IN, 1, 2, CTL2); // since I don't have a pitch knob, I'll use this instead
    // createController(MY_OSC_IN, 1, 3, CTL3); // another controller
    // createController(MY_OSC_IN, 0, 4, BACK_COLOR); // change ui color


    // levers
    createLever(BACK_COLOR);
    createLever(MOD1);

    // create set of notes (chord)
    createNotes("MY_CHORD", "1 4 6 b13");
    createNotes("MY_SCALE", "1 3 4 b7");

    // Get some stock chords and scales
    _chordNotes = getNotes("C4.o7");
    _scaleNotes = getScaleNotes("Algerian", "A3");

    // Create sequences, add notes/chords/funcs.
    SEQ1 = createSequence(8);
    SEQ1.Add(00.00, "G3", 0.7, 0.60);
    SEQ1.Add(01.00, "D3", 0.7, 0.60);
    SEQ1.Add(02.00, "A3.m7", 0.7, 0.60);
    SEQ1.Add(03.00, 66, 0.7, 0.60);
    SEQ1.Add(03.48, CrashCymbal1, 0.7, 0.60);

    DRUMS_SIMPLE = createSequence(8);
    DRUMS_SIMPLE.Add("x-------x-------x-------x-------", AcousticBassDrum, 0.7);
    DRUMS_SIMPLE.Add("----x-------x-x-----x-------x-x-", AcousticSnare, 0.6);
    DRUMS_SIMPLE.Add("------xx------xx------xx------xx", ClosedHiHat, 0.8);

    // Sequence that calls a script function.
    // ALGO_SEQ = createSequence(8);
    // ALGO_SEQ.Add(03.32, algoDynamic, 0.7);
    // NULL_SEQ = createSequence(8);
    // NULL_SEQ.Add(05.16, algoNull, 0.7);

    // Sections
    SECTION1 = createSection("section1", 0, 16);
    SECTION1.Add(PIANO, SEQ1,         SEQ1);
    SECTION1.Add(DRUMS, DRUMS_SIMPLE, DRUMS_SIMPLE);

    SECTION2 = createSection("section2", 16, 32);
    SECTION2.Add(PIANO, SEQ1,         SEQ1);
    SECTION2.Add(DRUMS, DRUMS_SIMPLE, DRUMS_SIMPLE);
    //SECTION2.Add(SYNTH, NULL_SEQ, ALGO_SEQ);
}

public override void setup2()
{
    if(_minimal)
    {
        sendPatch(PIANO, AcousticGrandPiano);
        sendPatch(BASS, AcousticBass);
        sendPatch(SYNTH, Lead1Square);
        sendPatch(DRUMS, 32);
    }
}

public override void step()
{
    //sequenced();
    randish();
}

void sequenced()
{
    bool doTick = false;

    switch(tock)
    {
        case 0:
            doTick = true;
            break;

        case 8:
        case 16:
        case 24:
        //case 32:
            double sn = _scaleNotes[_noteNum++ % _scaleNotes.Count()];
            sendNote(PIANO, sn + tick % 24, 0.7, 0.28);
            break;

        default:
            break;
    }

    if(doTick)
    {
        // keys
        switch(tick % 16)
        {
            case 0:
            case 4:
            case 8:
            case 12:
                //sendSequence(PIANO, SEQ1);
                foreach(int n in _chordNotes)
                {
                    sendNote(PIANO, n, 0.7, 1.0);
                }
                break;
        }

        // bass
        switch(tick % 16)
        {
            case 0:
            case 7:
            case 8:
                sendNote(BASS, 50, 0.8, 2.0);
                break;
        }
    }
}

void randish()
{
    if(tock % 4 == 0 && random(7) == 0) // play with these for how often
    {
        int which = random(40, 80);

        if(_notesPlaying[which] == 0) // don't play if already playing
        {
            int dur = random(1, 8);
            _notesPlaying[which] = tick + dur;
            sendNote(PIANO, which, random(0.6, 0.9), dur);
        }

        // Remove any scheduled to stop now.
        for(int i = 0;i < _notesPlaying.Length;i++)
        {
            if(_notesPlaying[i] != 0 && _notesPlaying[i] == tick)
            {
                _notesPlaying[i] = 0;
            }
        }
    }
}

public void On_BACK_COLOR()
{
    //print(BACK_COLOR.Name, "changed to", BACK_COLOR.Value);
}

public void On_CTL2()
{
    // 0 -> 127 in
    int newval = (int)Utils.Map(CTL2.Value, 0, 127, 0, 16383);
    //print("On_CTL2:", newval);
    sendController(SYNTH, PitchControl, newval);
}

public void On_CTL3()
{
    //print("On_CTL3:", CTL3.Value);
    if(random(0, 10) == 0)
    {
        sendNote(PIANO, 50 + CTL3.Value % 20, 0.7, 2.0);
    }
}

public void On_MOD1()
{
    //print(MOD1.Name, "changed to", MOD1.Value);
    // Send a controller change.
    sendController(SYNTH, Modulation, MOD1.Value);
}

public void On_VKBD_NOTE()
{
    //print("VKBD_NOTE", "=", VKBD_NOTE.Value);

    // Test for note on or off.
    if(VKBD_NOTE.Value > 0)
    {
        sendNoteOn(SYNTH, VKBD_NOTE.Value, 0.9);
    }
    else
    {
        sendNoteOff(SYNTH, -VKBD_NOTE.Value);
    }
}

public void On_KBD_NOTE()
{
    //print("KBD_NOTE", "=", KBD_NOTE.Value);

    // Test for note on or off.
    if(KBD_NOTE.Value > 0)
    {
        //sendNoteOn(PIANO, KBD_NOTE.Value, 0.9);
        sendNoteOn(SYNTH, KBD_NOTE.Value, 0.9);
        //sendNote(SYNTH, KBD_NOTE.Value, 0.8, 2.0); // fixed duration
    }
    else
    {
        //sendNoteOff(PIANO, -KBD_NOTE.Value);
        sendNoteOff(SYNTH, -KBD_NOTE.Value);
    }
}

public override void mouseClicked()
{
    // Note selected based on mouse position.
    int sn = (int)Utils.Map(mouseX, 0, width, 55, 70);
    sendNote(SYNTH, sn, 0.8, 0.48);
}
