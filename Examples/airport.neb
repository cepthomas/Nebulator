
// Eno's Music for Airports - ported from github.com/teropa/musicforairports.js


///// Constants /////
KEYS_DEF_VOL = constant(100);

///// Variables /////
COL1 = variable(200); // change color
MODN = variable(0); // modulate notes
PITCH = variable(8192); // center is 8192

///// Realtime Controllers /////
MI1 = midiin(1, 4, MODN);
MO1 = midiout(1, Pitch, PITCH);

////// Levers //////
L1 = lever(0, 255, COL1);
L2 = lever(0, 16383, PITCH); // max range
L3 = lever(-10, 10, MODN);

///// Tracks /////
KEYS = track(1, 5, 0, 0);



/////////////////////////////////////////////
class Loop
{
    public string snote;
    // Various times as Tick.Tock
    public Time duration;
    public Time delay;
    public Time nextStart;
    public Loop(string nt, double dur, double del)
    {
        snote = nt;
        duration = new Time(dur);
        delay =  new Time(del);
        nextStart =  new Time(del);
    }
}

List<Loop> loops = new List<Loop>();

public override void setup()
{
    println("setup()");

    loops.Clear();
    loops.Add(new Loop("F.4",  19.70,  4.00));
    loops.Add(new Loop("Ab.4", 17.80,  8.10));
    loops.Add(new Loop("C.5",  21.30,  5.60));
    loops.Add(new Loop("Db.5", 18.50, 12.60));
    loops.Add(new Loop("Eb.5", 20.00,  9.20));
    loops.Add(new Loop("F.5",  20.00, 14.10));
    loops.Add(new Loop("Ab.5", 17.70,  3.10));

    if(winGm)
    {
        sendPatch(KEYS, Pad2Warm);
    }
}

public override void step()
{
    foreach(Loop l in loops)
    {
        if(stepTime >= l.nextStart)
        {
            sendMidiNote(KEYS, l.snote, KEYS_DEF_VOL, l.duration);
            // Calc next time.
            l.nextStart = stepTime + l.delay + l.duration;
        }
    }
}

public void On_MODN()
{
    println("MODN changed to", MODN);
    modulate(KEYS, MODN);
}

public override void draw()
{
    background(COL1, 100, 200);
    int dy = height / (loops.Count + 1);
    strokeCap(ROUND);

    for (int i = 0; i < loops.Count; i++)
    {
        Loop loop = loops[i];
        int y = (i + 1) * dy;

        // Draw baseline.
        stroke(128);
        strokeWeight(2);
        line(10, y, width - 10, y);

        // Draw ball.
        int radius = 30;
        strokeWeight(3);

        int total = (loop.duration + loop.delay).TotalTocks;
        int pos = stepTime.TotalTocks % total;

        if(pos >= 0)
        {
            float x = width * pos / total;

            if(pos < loop.delay.TotalTocks)
            {
                noFill();
            }
            else 
            {
                fill(20, 240, 100);
            }

            ellipse(x, y, radius, radius);
        }
    }
}

public override void mouseClicked()
{
    // Note selected based on mouse position.
    //int sn = (int)map(mouseX, 0, width, scaleNotes[0], scaleNotes[scaleNotes.Length-1]);
    //sendMidiNote(KEYS, sn, 90, 0.48);
}
