
//////////// port of https://processing.org/examples/flocking.html /////////

// Changes I made:
// - ArrayList<> >>> List<>
// - e.g. for (Boid b : boids) >>> foreach (Boid b in boids)
// - .add >>> .Add
// - Flock and Boid classes needed some publics.
// - Updated per a bunch of "until Processing.js catches up" notes.
// - Added some sound generating code.

// Flocking by Daniel Shiffman.

// An implementation of Craig Reynold's Boids program to simulate the flocking behavior of birds. Each boid steers itself based on rules of avoidance, alignment, and coherence.

// Click the mouse to add a new boid.

// Channels
NChannel KEYS;
NChannel BASS;
NChannel SYNTH;


Flock my_flock;

// Index is note number, value is when to stop it.
int[] _notesPlaying = new int[128];


public override void setup()
{
    size(800, 800);
    my_flock = new Flock();

    // Add an initial set of boids into the system
    for (int i = 0; i < 150; i++)
    {
        my_flock.addBoid(new Boid(width / 2, height / 2));
    }
}

public override void draw()
{
    background(50);
    my_flock.run();
}

// Add a new boid into the System
public override void mousePressed()
{
    my_flock.addBoid(new Boid(mouseX,mouseY));
}


////////////////// Added ////////////////////

public override void setupNeb()
{
    // Channels
    KEYS = createChannel("keys", 1, 5, 0, 0);
    BASS = createChannel("bass", 2, 2, 0, 0);
    SYNTH = createChannel("synth", 3, 0);

    if(winGm)
    {
        sendPatch(KEYS, AcousticGrandPiano);
        sendPatch(BASS, AcousticBass);
        sendPatch(SYNTH, Pad3Polysynth);
    }
}

public override void step()
{
    if(tock % 4 == 0 && random(7) == 0) // play with these for how often
    {
        int which = random(40, 80);

        if(_notesPlaying[which] == 0) // don't play if already playing
        {
            //print("algoDynamic:", which);
            int dur = random(1, 8);
            _notesPlaying[which] = tick + dur;
            sendNote(SYNTH, which, random(80, 100), dur);
        }

        // Remove any scheduled to stop now.
        for(int i = 0;i < _notesPlaying.Length;i++)
        {
            if(_notesPlaying[i] != 0 && _notesPlaying[i] == tick)
            {
                _notesPlaying[i] = 0;
            }
        }
    }
}


/////////////////// Original //////////////////////////

// The Flock (a list of Boid objects)
public class Flock
{
    List<Boid> boids; // An ArrayList for all the boids

    public Flock()
    {
        boids = new List<Boid>(); // Initialize the ArrayList
    }

    public void run()
    {
        foreach (Boid b in boids)
        {
            b.run(boids);  // Passing the entire list of boids to each boid individually
        }
    }

    public void addBoid(Boid b)
    {
        boids.Add(b);
    }
}


// The Boid class
public class Boid
{
    PVector position;
    PVector velocity;
    PVector acceleration;
    float r;
    float maxforce;    // Maximum steering force
    float maxspeed;    // Maximum speed

    public Boid(float x, float y)
    {
        acceleration = new PVector(0, 0);
        velocity = PVector.random2D();
        position = new PVector(x, y);
        r = 2.0f;
        maxspeed = 2f;
        maxforce = 0.03f;
    }

    public void run(List<Boid> boids)
    {
        my_flock(boids);
        update();
        borders();
        render();
    }

    public void applyForce(PVector force)
    {
        // We could add mass here if we want A = F / M
        acceleration.add(force);
    }

    // We accumulate a new acceleration each time based on three rules
    public void my_flock(List<Boid> boids)
    {
        PVector sep = separate(boids);   // Separation
        PVector ali = align(boids);      // Alignment
        PVector coh = cohesion(boids);   // Cohesion

        // Arbitrarily weight these forces
        sep.mult(1.5f);
        ali.mult(1.0f);
        coh.mult(1.0f);
        
        // Add the force vectors to acceleration
        applyForce(sep);
        applyForce(ali);
        applyForce(coh);
    }

    // Method to update position
    public void update()
    {
        // Update velocity
        velocity.add(acceleration);
        // Limit speed
        velocity.limit(maxspeed);
        position.add(velocity);
        // Reset acceleration to 0 each cycle
        acceleration.mult(0);
    }

    // A method that calculates and applies a steering force towards a target
    // STEER = DESIRED MINUS VELOCITY
    public PVector seek(PVector target)
    {
        PVector desired = PVector.sub(target, position);  // A vector pointing from the position to the target
        // Scale to maximum speed
        desired.setMag(maxspeed);

        // Steering = Desired minus Velocity
        PVector steer = PVector.sub(desired, velocity);
        steer.limit(maxforce);  // Limit to maximum steering force
        return steer;
    }

    public void render()
    {
        // Draw a triangle rotated in the direction of velocity
        float theta = velocity.heading() + s.radians(90);

        s.fill(200, 100, 50);
        s.stroke(255);
        s.pushMatrix();
        s.translate(position.x, position.y);
        s.rotate(theta);
        s.beginShape();  // was: beginShape(TRIANGLES);
        s.vertex(0, -r * 2);
        s.vertex(-r, r * 2);
        s.vertex(r, r * 2);
        s.endShape(CLOSE);
        s.popMatrix();
    }

    // Wraparound
    public void borders()
    {
        if (position.x < -r) position.x = s.width + r;
        if (position.y < -r) position.y = s.height + r;
        if (position.x > s.width + r) position.x = -r;
        if (position.y > s.height + r) position.y = -r;
    }

    // Separation
    // Method checks for nearby boids and steers away
    public PVector separate (List<Boid> boids)
    {
        float desiredseparation = 25.0f;
        PVector steer = new PVector(0, 0, 0);
        int count = 0;

        // For every boid in the system, check if it's too close
        foreach (Boid other in boids)
        {
            float d = PVector.dist(position, other.position);
            // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
            if ((d > 0) && (d < desiredseparation))
            {
                // Calculate vector pointing away from neighbor
                PVector diff = PVector.sub(position, other.position);
                diff.normalize();
                diff.div(d);        // Weight by distance
                steer.add(diff);
                count++;            // Keep track of how many
            }
        }
        // Average -- divide by how many
        if (count > 0)
        {
            steer.div((float)count);
        }

        // As long as the vector is greater than 0
        if (steer.mag() > 0)
        {
            // Implement Reynolds: Steering = Desired - Velocity
            steer.setMag(maxspeed);
            steer.sub(velocity);
            steer.limit(maxforce);
        }
        return steer;
    }

    // Alignment
    // For every nearby boid in the system, calculate the average velocity
    public PVector align (List<Boid> boids)
    {
        float neighbordist = 50;
        PVector sum = new PVector(0, 0);
        int count = 0;

        foreach (Boid other in boids)
        {
            float d = PVector.dist(position, other.position);
            if ((d > 0) && (d < neighbordist))
            {
                sum.add(other.velocity);
                count++;
            }
        }

        if (count > 0)
        {
            sum.div((float)count);

            // Implement Reynolds: Steering = Desired - Velocity
            sum.setMag(maxspeed);
            PVector steer = PVector.sub(sum, velocity);
            steer.limit(maxforce);
            return steer;
        }
        else
        {
            return new PVector(0, 0);
        }
    }

    // Cohesion
    // For the average position (i.e. center) of all nearby boids, calculate steering vector towards that position
    public PVector cohesion (List<Boid> boids)
    {
        float neighbordist = 50;
        PVector sum = new PVector(0, 0);   // Start with empty vector to accumulate all positions
        int count = 0;

        foreach (Boid other in boids)
        {
            float d = PVector.dist(position, other.position);
            if ((d > 0) && (d < neighbordist))
            {
                sum.add(other.position); // Add position
                count++;
            }
        }

        if (count > 0)
        {
            sum.div(count);
            return seek(sum);  // Steer towards the position
        }
        else
        {
            return new PVector(0, 0);
        }
    }
}