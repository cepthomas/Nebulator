
// Example Nebulator composition file with some UI demo.
// Warning: this is not actual music!

///// Include other lib files. /////
#include "utils.neb"
#include "scale.neb"


///// Volumes.
const double KEYS_VOL = 0.8;
const double DRUM_VOL = 0.8;


///// Variables
NVariable vColor;
NVariable vModN;
NVariable vVkeyNote;

///// Channels
NChannel chKeys;
NChannel chBass;
NChannel chDrums;
NChannel chSynth;

///// Sequences
NSequence seqDynamic;


////// Simple variables for functions
double[] _scaleNotes;
double[] _chordNotes;
int _noteNum = 48;


////// Nebulator midi stuff
public override void Setup()
{
    // All the neb variables.
    vColor = CreateVariable("color", 200, 0, 255); // change color
    vModN = CreateVariable("modn", 0, -10, 10);
    vVkeyNote = CreateVariable("note", 60, -127, 127, On_vVkeyNote); // note neg number for note off encoding

    // IO devices.
    // All the outputs.
    chKeys = CreateChannel("keys", DeviceType.MidiOut, 1, 0.1);
    chBass = CreateChannel("bass", DeviceType.MidiOut, 2, 0.1);
    chSynth = CreateChannel("synth", DeviceType.MidiOut, 3, 0.1);
    chDrums = CreateChannel("drums", DeviceType.MidiOut, 10, 0.1);

    // All the inputs.
    CreateController(DeviceType.VkeyIn, 1, NoteControl, vVkeyNote);
    // CreateController(DeviceType.MidiIn, 1, 1, vMod1); // modulate eq
    // CreateController(DeviceType.MidiIn, 1, 2, vCtl2); // since I don't have a pitch knob, I'll use this instead
    // CreateController(DeviceType.MidiIn, 1, 3, vCtl3); // another controller

    // Create set of notes (chord)
    CreateNotes("MY_CHORD", "1 -4 6 -b13");
    CreateNotes("MY_SCALE", "1 3 4 b7");

    // levers
    CreateLever(vColor);
    CreateLever(vModN);

    // Get some stock chords and scales
    _scaleNotes = GetScaleNotes("Algerian", "A3");
    _chordNotes = GetChordNotes("C4.o7");
}

public override void Setup2()
{
    SendPatch(chKeys, AcousticGrandPiano);
    SendPatch(chBass, AcousticBass);
    SendPatch(chSynth, Lead1Square);
    SendPatch(chDrums, 32); // kit

    BuildComp();
}

void BuildComp()
{

    /////////////////////// sequences /////////////////////////////////

    NSequence seqKeysVerse = CreateSequence(8, new NSequenceElements
    {
        { "|7-      7-      |7-      7-      |", "G4.m7", KEYS_VOL },
        { "|    4-      4-8-|    4-      4-8-|", "G4.m6", KEYS_VOL*0.9 }
    });

    NSequence seqKeysChorus = CreateSequence(8, new NSequenceElements
    {
        { 0.0, "F4",    0.7,      0.2 },
        { 0.2, "D#4",   KEYS_VOL, 0.2 },
        { 1.0, "C4",    0.7,      0.2 },
        { 1.2, "B4.m7", 0.7,      0.2 },
        { 2.0, "F5",    0.7,      0.2 },
        { 2.2, "D#5",   KEYS_VOL, 0.2 },
        { 3.0, "C5",    0.7,      0.2 },
        { 3.2, "B5.m7", 0.7,      0.2 },
        { 4.0, "F3",    0.7,      0.2 },
        { 4.2, "D#3",   KEYS_VOL, 0.2 },
        { 5.0, "C3",    0.7,      0.2 },
        { 5.2, "B3.m7", 0.7,      0.2 },
        { 6.0, "F2",    0.7,      0.2 },
        { 6.2, "D#2",   KEYS_VOL, 0.2 },
        { 7.0, "C2",    0.7,      0.2 },
        { 7.2, "B2.m7", 0.7,      0.2 },
    });

    NSequence seqDrumsSimple = CreateSequence(8, new NSequenceElements
    {
        { 0.0, AcousticBassDrum,  DRUM_VOL },
        { 1.0, RideCymbal1,       DRUM_VOL },
        { 1.1, RideCymbal1,       DRUM_VOL },
        { 1.2, HiMidTom,          DRUM_VOL },
        { 2.0, AcousticBassDrum,  DRUM_VOL },
        { 3.0, RideCymbal1,       DRUM_VOL },
        { 3.1, RideCymbal1,       DRUM_VOL },
        { 4.0, AcousticBassDrum,  DRUM_VOL },
        { 5.0, RideCymbal1,       DRUM_VOL },
        { 5.1, RideCymbal1,       DRUM_VOL },
        { 5.2, HiMidTom,          DRUM_VOL },
        { 6.0, AcousticBassDrum,  DRUM_VOL },
        { 7.0, CrashCymbal2,      DRUM_VOL },
    });

    NSequence seqDrumsVerse = CreateSequence(8, new NSequenceElements
    {
        { "|8       8       |8       8       |", AcousticBassDrum, DRUM_VOL },
        { "|    8       8 8 |    8       8 8 |", AcousticSnare,    DRUM_VOL*0.9 },
        { "|      88      88|      88      88|", ClosedHiHat,      DRUM_VOL*1.1 },
    });

    NSequence seqBassVerse = CreateSequence(8, new NSequenceElements
    {
        { 0.0, "C2",  0.75, 0.2 },
        { 0.2, "C2",  0.75, 0.1 },
        { 3.3, "E2",  0.75, 0.2 },
        { 4.0, "C2",  0.75, 1.0 },
        { 7.2, "A#2", 0.75, 0.1 }
    });

    NSequence seqAlgo = CreateSequence(4, new NSequenceElements
    {
        { 1.2, Algo, 0.8 },
    });

    NSequence seqEmpty = CreateSequence(4, new NSequenceElements
    {
    });

    // Sequence triggered in script.
    seqDynamic = CreateSequence(8, new NSequenceElements
    {
        { 0.0, "G3 ", 0.75, 0.2 },
        { 1.0, "A3 ", 0.75, 0.2 },
        { 2.0, "Bb3", 0.75, 0.2 },
        { 3.0, "C4 ", 0.75, 0.2 },
    });


    /////////////////////// sections /////////////////////////////////

    NSection sectBeginning = CreateSection(32, "Beginning", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysVerse   },
        { chDrums, Loop,  seqDrumsSimple },
        { chBass,  Loop,  seqBassVerse   }
    });

    NSection sectMiddle = CreateSection(16, "Middle", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysChorus },
        { chDrums, Loop,  seqDrumsVerse },
        { chBass,  Loop,  seqBassVerse  },
        { chSynth, Once,  seqAlgo,  seqEmpty, seqDynamic, seqEmpty }
    });

    NSection sectEnding = CreateSection(32, "Ending", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysVerse   },
        { chDrums, Loop,  seqDrumsSimple },
        { chBass,  Loop,  seqBassVerse   }
    });
}


////////////////// overrides /////////////////////////////

public override void Step()
{
    if(Tick != 0) // not looking at Ticks right now
    {
        return;
    }
}

////////////////// my functions /////////////////////////////

void Algo()
{
    // Print("!!!! Algo");
    int notenum = Random(55, 70);
    SendNote(chSynth, notenum, 0.8, 0.2);
}

void AlgoNull()
{
    // Print("!!!! AlgoNull");
}

////////////// event handlers ////////////////////

public void On_vVkeyNote()
{
    //Print("vVkeyNote", "=", vVkeyNote.Value);

    // Test for note on or off.
    if(vVkeyNote.Value > 0)
    {
        SendNoteOn(chSynth, vVkeyNote.Value, 0.9);
    }
    else
    {
        SendNoteOff(chSynth, -vVkeyNote.Value);
    }
}
