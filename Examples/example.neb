
// Example Nebulator composition file with some UI demo.
// Has declarative and algorithmic components.
// Warning: this is not actual music!

///// Include other lib files. /////
include utils.neb


///// Constants /////
// When to play.
constant WHEN1 0
constant WHEN2 32
constant WHEN3 48
constant WHEN4 80
// Total length.
constant TLEN 128
// Volumes.
constant KEYS_DEF_VOL 100
constant DRUM_DEF_VOL 100

///// Variables /////
variable COL1 200 // change color
variable MODN 0 // modulate notes
variable PITCH 8192 // center is 8192

///// Realtime Controllers /////
midictlin MI1 1 4 MODN
midictlout MO1 1 Pitch PITCH

////// Levers //////
lever L1 0 255 COL1
lever L2 0 16383 PITCH // max range
lever L3 -10 10 MODN


///// Tracks /////
track KEYS 1 5 0 0
track BASS 2 2 0 0
track DRUMS 10 4 0 0
track SYNTH 3 0

////////// Sections //////////
section PART1 WHEN1 WHEN2 // 32
KEYS   KEYS_VERSE1   KEYS_VERSE1
DRUMS  DRUMS_VERSE   DRUMS_VERSE   DRUMS_VERSE   DRUMS_VERSE 
BASS   BASS_VERSE    BASS_VERSE    BASS_VERSE    BASS_VERSE

section PART2 WHEN2 WHEN3 // 16
KEYS   KEYS_VERSE2    KEYS_VERSE2
DRUMS  DRUMS_SIMPLE   DRUMS_SIMPLE 
BASS   BASS_VERSE     BASS_VERSE
SYNTH  NULL           ALGO1

section PART3 WHEN3 WHEN4 // 32
KEYS   KEYS_VERSE1   KEYS_VERSE1
DRUMS  DRUMS_VERSE   DRUMS_VERSE   DRUMS_VERSE   DRUMS_VERSE 
BASS   BASS_VERSE    BASS_VERSE    BASS_VERSE    BASS_VERSE

///// Sequences /////

sequence KEYS_VERSE1 16
0.00  G4.m7 90 1.32
1.60  G4.m7 90 0.20
2.00  G4.m7 90 0.20
4.00  G4.m7 90 1.32
5.60  G4.m7 90 0.20
6.00  G4.m7 90 0.20
8.00  G4.m6 90 1.32
9.60  G4.m6 90 0.20
10.00 G4.m6 90 0.20
12.00 G4.m6 90 1.32
13.60 G4.m6 90 0.20
14.00 G4.m6 90 0.20

sequence KEYS_VERSE2 8
0.00 F4.??? 90 0.32
0.32 D#4    KEYS_DEF_VOL 0.32
1.00 C4     90 0.32
1.32 B4.m7  90 0.32
2.00 F5     90 0.32
2.32 D#5    KEYS_DEF_VOL 0.32
3.00 C5     90 0.32
3.32 B5.m7  90 0.32
4.00 F3     90 0.32
4.32 D#3    KEYS_DEF_VOL 0.32
5.00 C3     90 0.32
5.32 B3.m7  90 0.32
6.00 F2     90 0.32
6.32 D#2    KEYS_DEF_VOL 0.32
7.00 C2     90 0.32
7.32 B2.m7  90 0.32

////// Bass //////
sequence BASS_VERSE 8
0.00 C2  70 0.25
0.48 C2  70 0.1/8
3.32 E2  70 0.25
4.00 C2  70 1.00
7.48 A#2 70 0.10

////// Drums //////

// "musical"
sequence DRUMS_VERSE 8
0.00 AcousticBassDrum DRUM_DEF_VOL
1.00 RideCymbal1 DRUM_DEF_VOL
1.10 RideCymbal1 DRUM_DEF_VOL
1.60 HiMidTom DRUM_DEF_VOL
2.00 AcousticBassDrum DRUM_DEF_VOL
3.00 RideCymbal1 DRUM_DEF_VOL
3.10 RideCymbal1 DRUM_DEF_VOL
4.00 AcousticBassDrum DRUM_DEF_VOL
5.00 RideCymbal1 DRUM_DEF_VOL
5.10 RideCymbal1 DRUM_DEF_VOL
5.60 HiMidTom DRUM_DEF_VOL
6.00 AcousticBassDrum DRUM_DEF_VOL
7.00 CrashCymbal2 DRUM_DEF_VOL

// Using patterns. Each hit is 1/16 note - fixed resolution and volume for now.
sequence DRUMS_SIMPLE 8
x-------x-------x-------x------- AcousticBassDrum 90
----x-------x-x-----x-------x-x- AcousticSnare 80

// Sequenced triggered in script
sequence DYNAMIC_SEQ 8
0.00 G3  90 0.60
1.00 A3  90 0.60
2.00 Bb3 90 0.60
3.00 C4  90 0.60

// Sequence that calls a script function.
sequence ALGO1 8
00.00  algoDynamic()  90

sequence NULL 8
00.00  algoNull()  90


///// Functions /////

// Simple variables for functions.
float posX = 50;
float posY = 50;
int velX = 3;
int velY = 3;
int ballSize = 40;
int[] scaleNotes;


////// Nebulator midi stuff //////
public override void step()
{
    // Play a sequence periodically.
    if(tock == 0)
    {
        // On the one - time to do something.
        switch(tick)
        {
            case 0:
            case 16:
                playSequence(SYNTH, DYNAMIC_SEQ);
                break;

            case 8:
                sendMidiNote(SYNTH, "D4", 95, 0.00); // named note on, no chase
                break;

            case 12:
                sendMidiNote(SYNTH, 62, 0, 0.00); // numbered note (D4 above) off
                break;

            case 24:
            case 25:
            case 26:
            case 27:
                int notenum = random(40, 70);
                sendMidiNote(SYNTH, notenum, 95, 1.09);
                break;
        }
    }
}

public void On_MODN()
{
    println("MODN changed to", MODN);
    modulate(KEYS, MODN);
}

void algoDynamic()
{
    println("!!!! algoDynamic");
    sendMidiNote(SYNTH, 70, 0, 0.00);
}

void algoNull()
{
    println("!!!! algoNull");
}

////// Nebulator graphics stuff //////
public override void setup()
{
    println("setup()");

    // Load up a scale.
    scaleNotes = getScaleNotes("Algerian", "C4");

    // Patches (optional). Only needed if using the Windows GM.
    if(winGm)
    {
        sendPatch(KEYS, AcousticGrandPiano);
        sendPatch(BASS, AcousticBass);
        sendPatch(SYNTH, Pad3Polysynth);
    }
}

public override void draw()
{
    background(COL1, 100, 200);

    if(playing && moveBall())
    {
        int notenum = random(40, 70);
        // sendMidiNote(SYNTH, notenum, 95, 1.09);
    }

    // Draw the ball.
    noStroke();
    int x = (int)map(posX, 0, width, 0, 255);
    color c = color(x, (x + 100) % 256, (x + 200) % 256);
    fill(c);
    ellipse(posX, posY, ballSize, ballSize);

    if (mousePressedP)
    {
        //println("mouse is pressed");
        fill(random(255), random(255), random(255));
        strokeWeight(2);
        stroke(0, 100);
        ellipse(mouseX, mouseY, 80, 80);
    }
}

public override void mouseClicked()
{
    // Note selected based on mouse position.
    int sn = (int)map(mouseX, 0, width, scaleNotes[0], scaleNotes[scaleNotes.Length-1]);
    sendMidiNote(SYNTH, sn, 90, 0.32);
}

public override void keyPressed()
{
    println("keyPressed:", key);

    int v = key == 'c' ? 60 : 70;
    sendMidiNote(KEYS, v, KEYS_DEF_VOL, 1.32);
}

bool moveBall()
{
    bool edge = false;

    ///// Move the ball. /////
    posX += velX;
    if (posX <= ballSize / 2)
    {
        posX = ballSize / 2;
        velX = -velX;
        edge = true;
    }
    else if (posX >= width - ballSize / 2)
    {
        posX = width - ballSize / 2;
        velX = -velX;
        edge = true;
    }

    posY += velY;
    if (posY <= ballSize / 2)
    {
        posY = ballSize / 2;
        velY = -velY;
        edge = true;
    }
    else if (posY >= height - ballSize / 2)
    {
        posY = height - ballSize / 2;
        velY = -velY;
        edge = true;
    }
    return edge;
}
