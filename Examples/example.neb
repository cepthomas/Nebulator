
// Example Nebulator composition file with some UI demo.
// Warning: this is not actual music!

///// Include other lib files. /////
#import "utils.neb"
#import "scale.neb"


///// Constants /////
// When to play.
const int WHEN1 = 0;
const int WHEN2 = 32;
const int WHEN3 = 48;
const int WHEN4 = 80;
// Total length.
const int TLEN = 128;
// Volumes.
const double KEYS_DEF_VOL = 0.8;
const double DRUM_DEF_VOL = 0.8;

///// Variables /////
NVariable COL1;
NVariable MODN;
NVariable VKBD_NOTE;

///// Channels /////
NChannel KEYS;
NChannel BASS;
NChannel DRUMS;
NChannel SYNTH;

///// Sequences /////
NSequence KEYS_VERSE1;
NSequence KEYS_VERSE2;
NSequence BASS_VERSE;
NSequence DRUMS_VERSE;
NSequence DRUMS_SIMPLE;
NSequence DYNAMIC_SEQ;
NSequence ALGO_SEQ;
NSequence NULL_SEQ;


////// Simple variables for functions. ///////
double[] _scaleNotes;
double[] _chordNotes;
int _noteNum = 48;

// Use wingm and virtual kbd only.
bool _minimal = true;


////// Nebulator midi stuff //////
public override void Setup()
{
    string MY_MIDI_OUT = _minimal ? "MIDI:Microsoft GS Wavetable Synth" : "MIDI:yours";

    // All the neb variables.
    COL1 = CreateVariable("color", 200, 0, 255); // change color
    MODN = CreateVariable("modn", 0, -10, 10);
    VKBD_NOTE = CreateVariable("note", 60, -127, 127, On_VKBD_NOTE);

    // All the channels.
    KEYS = CreateChannel("keys", MY_MIDI_OUT, 1);
    BASS = CreateChannel("bass", MY_MIDI_OUT, 2);
    SYNTH = CreateChannel("synth", MY_MIDI_OUT, 3);
    DRUMS = CreateChannel("drums", MY_MIDI_OUT, 10);

    // Some wobblers.
    SetWobbler(KEYS, 0.1);
    SetWobbler(BASS, 0.1);
    SetWobbler(SYNTH, 0.1);
    SetWobbler(DRUMS, 0.1);

    // Create set of notes (chord)
    CreateNotes("MY_CHORD", "1 4 6 b13");
    CreateNotes("MY_SCALE", "1 3 4 b7");

    // levers
    CreateLever(COL1);
    CreateLever(MODN);

    CreateController("VKEY:", 0, NoteControl, VKBD_NOTE);

    ///// Sequences /////
    KEYS_VERSE1 = CreateSequence(16);
    KEYS_VERSE1.Add(0.00,  "G4.m7", 0.7, 1.32);
    KEYS_VERSE1.Add(1.60,  "G4.m7", 0.7, 0.20);
    KEYS_VERSE1.Add(2.00,  "G4.m7", 0.7, 0.20);
    KEYS_VERSE1.Add(4.00,  "G4.m7", 0.7, 1.32);
    KEYS_VERSE1.Add(5.60,  "G4.m7", 0.7, 0.20);
    KEYS_VERSE1.Add(6.00,  "G4.m7", 0.7, 0.20);
    KEYS_VERSE1.Add(8.00,  "G4.m6", 0.7, 1.32);
    KEYS_VERSE1.Add(9.60,  "G4.m6", 0.7, 0.20);
    KEYS_VERSE1.Add(10.00, "G4.m6", 0.7, 0.20);
    KEYS_VERSE1.Add(12.00, "G4.m6", 0.7, 1.32);
    KEYS_VERSE1.Add(13.60, "G4.m6", 0.7, 0.20);
    KEYS_VERSE1.Add(14.00, "G4.m6", 0.7, 0.20);

    KEYS_VERSE2 = CreateSequence(8);
    KEYS_VERSE2.Add(0.00, "F4",    0.7, 0.32);
    KEYS_VERSE2.Add(0.32, "D#4",   KEYS_DEF_VOL, 0.32);
    KEYS_VERSE2.Add(1.00, "C4",    0.7, 0.32);
    KEYS_VERSE2.Add(1.32, "B4.m7", 0.7, 0.32);
    KEYS_VERSE2.Add(2.00, "F5",    0.7, 0.32);
    KEYS_VERSE2.Add(2.32, "D#5",   KEYS_DEF_VOL, 0.32);
    KEYS_VERSE2.Add(3.00, "C5",    0.7, 0.32);
    KEYS_VERSE2.Add(3.32, "B5.m7", 0.7, 0.32);
    KEYS_VERSE2.Add(4.00, "F3",    0.7, 0.32);
    KEYS_VERSE2.Add(4.32, "D#3",   KEYS_DEF_VOL, 0.32);
    KEYS_VERSE2.Add(5.00, "C3",    0.7, 0.32);
    KEYS_VERSE2.Add(5.32, "B3.m7", 0.7, 0.32);
    KEYS_VERSE2.Add(6.00, "F2",    0.7, 0.32);
    KEYS_VERSE2.Add(6.32, "D#2",   KEYS_DEF_VOL, 0.32);
    KEYS_VERSE2.Add(7.00, "C2",    0.7, 0.32);
    KEYS_VERSE2.Add(7.32, "B2.m7", 0.7, 0.32);

    ////// Bass //////
    BASS_VERSE = CreateSequence(8);
    BASS_VERSE.Add(0.00, "C2",  0.75, 0.25);
    BASS_VERSE.Add(0.48, "C2",  0.75, 0.125);
    BASS_VERSE.Add(3.32, "E2",  0.75, 0.25);
    BASS_VERSE.Add(4.00, "C2",  0.75, 1.00);
    BASS_VERSE.Add(7.48, "A#2", 0.75, 0.10);

    ////// Drums //////

    // "musical"
    DRUMS_VERSE = CreateSequence(8);
    DRUMS_VERSE.Add(0.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_VERSE.Add(1.00, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_VERSE.Add(1.10, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_VERSE.Add(1.60, HiMidTom,         DRUM_DEF_VOL);
    DRUMS_VERSE.Add(2.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_VERSE.Add(3.00, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_VERSE.Add(3.10, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_VERSE.Add(4.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_VERSE.Add(5.00, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_VERSE.Add(5.10, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_VERSE.Add(5.60, HiMidTom,         DRUM_DEF_VOL);
    DRUMS_VERSE.Add(6.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_VERSE.Add(7.00, CrashCymbal2,     DRUM_DEF_VOL);

    // Using patterns. Each hit is 1/16 note - fixed resolution and volume for now.
    DRUMS_SIMPLE = CreateSequence(8);
    DRUMS_SIMPLE.Add("x-------x-------x-------x-------", AcousticBassDrum, 0.8);
    DRUMS_SIMPLE.Add("----x-------x-x-----x-------x-x-", AcousticSnare,    0.7);
    DRUMS_SIMPLE.Add("------xx------xx------xx------xx", ClosedHiHat,      0.9);

    // Sequence triggered in script
    DYNAMIC_SEQ = CreateSequence(8);
    DYNAMIC_SEQ.Add(0.00, "G3 ", 0.75, 0.60);
    DYNAMIC_SEQ.Add(1.00, "A3 ", 0.75, 0.60);
    DYNAMIC_SEQ.Add(2.00, "Bb3", 0.75, 0.60);
    DYNAMIC_SEQ.Add(3.00, "C4 ", 0.75, 0.60);

    // Sequence that calls a script function.
    ALGO_SEQ = CreateSequence(8);
    ALGO_SEQ.Add(00.00, algoDynamic, 0.75);

    NULL_SEQ = CreateSequence(8);
    NULL_SEQ.Add(00.00, algoNull, 0.75);

    // Get some stock chords and scales
    _scaleNotes = GetScaleNotes("Algerian", "A3");
    _chordNotes = GetNotes("C4.o7");
}

public override void Setup2()
{
    if(_minimal)
    {
        SendPatch(KEYS, AcousticGrandPiano);
        SendPatch(BASS, AcousticBass);
        SendPatch(SYNTH, Lead1Square);
        SendPatch(DRUMS, 32); // kit
    }
}

public override void Step()
{
    if(tock != 0) // not looking at tocks right now
    {
        return;
    }

    ///// drums /////
    if(isOneOf(Tick, 0, 8, 24))
    {
        SendSequence(DRUMS, DRUMS_SIMPLE);
    }

    if(isOneOf(Tick, 16))
    {
        SendSequence(DRUMS, DRUMS_VERSE);
    }

    ///// piano /////
    if(isOneOf(Tick, 0, 8))
    {
        SendSequence(KEYS, KEYS_VERSE1);
    }

    if(isOneOf(Tick, 16, 24))
    {
        SendSequence(KEYS, KEYS_VERSE2);
    }

    if(isOneOf(Tick, 26))
    {
        double sn = _scaleNotes[_noteNum++ % _scaleNotes.Count()];
        SendNote(KEYS, sn + Tick % 24, 0.7, 0.28);

        // foreach(int n in _chordNotes)
        // {
        //     SendNote(KEYS, n, 0.7, 1.0);
        // }
    }

    ///// bass /////
    if(isOneOf(Tick % 16, 0, 7, 8))
    {
        SendNote(BASS, 50, 0.8, 2.0);
    }

    ///// synth /////
    if(isOneOf(Tick, 10))
    {
        SendSequence(SYNTH, ALGO_SEQ);
    }

    // // Play a sequence periodically.
    // switch(Tick)
    // {
    //     case 0:
    //         SendNote(SYNTH, "F3", 0.8, 0.48);
    //         break;
    //     case 16:
    //         SendSequence(SYNTH, DYNAMIC_SEQ);
    //         break;

    //     case 8:
    //         SendNoteOn(SYNTH, 62, 0.8); // numbered note on, no chase
    //         break;

    //     case 12:
    //         SendNoteOff(SYNTH, 62); // numbered note off
    //         break;

    //     case 24:
    //     case 25:
    //     case 26:
    //     case 27:
    //         int notenum = random(40, 70);
    //         SendNote(SYNTH, notenum, 0.8, 1.09);
    //         break;
    // }
}

void algoDynamic()
{
    // Print("!!!! algoDynamic");
    int notenum = random(40, 70);
    SendNote(SYNTH, notenum, 0.8, 0.30);
}

void algoNull()
{
    // Print("!!!! algoNull");
}

public void On_VKBD_NOTE()
{
    //Print("VKBD_NOTE", "=", VKBD_NOTE.Value);

    // Test for note on or off.
    if(VKBD_NOTE.Value > 0)
    {
        SendNoteOn(SYNTH, VKBD_NOTE.Value, 0.9);
    }
    else
    {
        SendNoteOff(SYNTH, -VKBD_NOTE.Value);
    }
}
