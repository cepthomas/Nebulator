
// Example Nebulator composition file with some UI demo.
//----- Warning: this is not actual music! --------

///// Directives/preprocess: Include config and lib files. /////
Include(utils.neb);
Include(scale.neb);

///// All the channel/outputs.
Channel("keys",  MidiOut, 1,  AcousticGrandPiano,  0.1);
Channel("bass",  MidiOut, 2,  AcousticBass,  0.1);
Channel("synth", MidiOut, 3,  Lead1Square,  0.1);
Channel("drums", MidiOut, 10, Jazz, 0.1); // for drums = kit

///// Volumes.
const double KEYS_VOL = 0.8;
const double DRUM_VOL = 0.8;

///// Sequences
Sequence seqDynamic;

// Compiler test.
//error
//int _unused = 48;

////// Simple variables for functions.
List<double> _scaleNotes;
List<double> _chordNotes;
List<double> _myChordNotes;
List<double> _myScaleNotes;


////// Nebulator setup stuff
public override void Setup()
{
    // Create sets of notes.
    CreateNotes("MY_SCALE", "1 3 4 b7");
    _myScaleNotes = GetNotes("B4.MY_SCALE");
    // Get some stock chords and scales.
    _scaleNotes = GetNotes("G3.Algerian");
    _chordNotes = GetNotes("C4.o7");

    bool b = Boing(60);

    BuildComp();
}    

///// Make the music.
public void BuildComp()
{
    /////////////////////// sequences /////////////////////////////////

    Sequence seqKeysVerse = CreateSequence(8, new SequenceElements
    {
      //{ "|........|........|........|........|........|........|........|........|"},
        { "|7-------|--      |        |        |7-------|--      |        |        |", "G4.m7", KEYS_VOL },
        { "|        |        |        |5---    |        |        |        |5-8---  |", "G4.m6", KEYS_VOL*0.9 }
    });

    // This is probably the better way to do chordal instruments.
    Sequence seqKeysChorus = CreateSequence(8, new SequenceElements
    {
        { 0.0, "F4",    0.7,      0.2 },
        { 0.4, "D#4",   KEYS_VOL, 0.2 },
        { 1.0, "C4",    0.7,      0.2 },
        { 1.4, "B4.m7", 0.7,      0.2 },
        { 2.0, "F5",    0.7,      0.2 },
        { 2.4, "D#5",   KEYS_VOL, 0.2 },
        { 3.0, "C5",    0.7,      0.2 },
        { 3.4, "B5.m7", 0.7,      0.2 },
        { 4.0, "F3",    0.7,      0.2 },
        { 4.4, "D#3",   KEYS_VOL, 0.2 },
        { 5.0, "C3",    0.7,      0.2 },
        { 5.4, "B3.m7", 0.7,      0.2 },
        { 6.0, "F2",    0.7,      0.2 },
        { 6.4, "D#2",   KEYS_VOL, 0.2 },
        { 7.0, "C2",    0.7,      0.2 },
        { 7.4, "B2.m7", 0.7,      0.2 },
    });

    Sequence seqDrumsChorus = CreateSequence(8, new SequenceElements
    {
        { 0.0, AcousticBassDrum,  DRUM_VOL },
        { 1.0, RideCymbal1,       DRUM_VOL },
        { 1.2, RideCymbal1,       DRUM_VOL },
        { 1.4, HiMidTom,          DRUM_VOL },
        { 2.0, AcousticBassDrum,  DRUM_VOL },
        { 3.0, RideCymbal1,       DRUM_VOL },
        { 3.2, RideCymbal1,       DRUM_VOL },
        { 4.0, AcousticBassDrum,  DRUM_VOL },
        { 5.0, RideCymbal1,       DRUM_VOL },
        { 5.2, RideCymbal1,       DRUM_VOL },
        { 5.4, HiMidTom,          DRUM_VOL },
        { 6.0, AcousticBassDrum,  DRUM_VOL },
        { 7.0, CrashCymbal2,      DRUM_VOL },
    });

    // This is probably the better way to do drums and rhythmic instruments.
    Sequence seqDrumsVerse = CreateSequence(4, new SequenceElements
    {
      //{ "|........|........|........|........|"},
        { "|8       |8       |8       |8       |", AcousticBassDrum, DRUM_VOL },
        { "|    8   |    8   |    8   |    8 8 |", AcousticSnare,    DRUM_VOL*0.9 },
        { "|      88|      88|      88|      88|", ClosedHiHat,      DRUM_VOL*1.1 },
    });

    // Single note (melodic) sequence could be either way.
    Sequence seqBassVerse = CreateSequence(8, new SequenceElements
    {
        { 0.0, "C2",  0.7, 0.1 },
        { 0.4, "C2",  0.7, 0.1 },
        { 3.5, "E2",  0.7, 0.1 },
        { 4.0, "C2",  0.7, 1.0 },
        { 7.4, "A#2", 0.7, 0.1 },
    });

    Sequence seqBassChorus = CreateSequence(8, new SequenceElements
    {
        { 0.0, "C2",  0.7, 0.1 },
        { 0.4, "C2",  0.7, 0.1 },
        { 2.0, "C2",  0.7, 0.1 },
        { 2.4, "C2",  0.7, 0.1 },
        { 4.0, "C2",  0.7, 0.1 },
        { 4.4, "C2",  0.7, 0.1 },
        { 6.0, "C2",  0.7, 0.1 },
        { 6.4, "C2",  0.7, 0.1 },
    });

    Sequence seqAlgo = CreateSequence(4, new SequenceElements
    {
        { 1.2, AlgoFunc, 0.8 },
    });

    Sequence seqEmpty = CreateSequence(4, new SequenceElements
    {
    });

    // Sequence triggered in script.
    seqDynamic = CreateSequence(8, new SequenceElements
    {
        { 0.0, "G3 ", 0.7, 0.1 },
        { 1.0, "A3 ", 0.7, 0.1 },
        { 2.0, "Bb3", 0.7, 0.1 },
        { 6.0, "C4 ", 0.7, 0.1 },
    });


    /////////////////////// sections /////////////////////////////////

    Section sectBeginning = CreateSection(32, "Beginning", new SectionElements
    {
        { "keys",  seqKeysVerse   },
        { "drums", seqDrumsVerse  },
        { "bass",  seqBassVerse   }
    });

    Section sectMiddle = CreateSection(32, "Middle", new SectionElements
    {
        { "keys",  seqKeysChorus  },
        { "drums", seqDrumsChorus },
        { "bass",  seqBassChorus  },
        { "synth", seqAlgo, seqEmpty, seqAlgo, seqDynamic, seqEmpty }
    });

    Section sectEnding = CreateSection(32, "Ending", new SectionElements
    {
        { "keys",  seqKeysVerse   },
        { "drums", seqDrumsVerse  },
        { "bass",  seqBassVerse   }
    });
}


////////////////// overrides /////////////////////////////

public override void Step()
{
    if(StepTime == new Time(0))
    {
        SendController("synth", Pan, 90);
        SendController("keys",  Pan, 30);
    }
}

public override void InputNote(DeviceType dev, int channel, double note)
{
    Print("Input note", dev, channel, note);
}

public virtual void InputControl(DeviceType dev, int channel, ControllerDef ctlid, double value)
{
    Print("Input control", dev, channel, ctlid, value);
}


////////////////// custom functions /////////////////////////////

void AlgoFunc()
{
    int notenum = Random(0, _scaleNotes.Count());
    SendNote("synth", _scaleNotes[notenum], 0.7, 0.1);
}
