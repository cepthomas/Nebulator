
// Example Nebulator composition file with some UI demo.
//----- Warning: this is not actual music! --------

///// Directives/preprocess: Include config and lib files. /////
Include("utils.neb");
Include("scale.neb");

///// All the channel/outputs.
Channel("keys",  MidiOut, 1, AcousticGrandPiano,  0.1);
Channel("bass",  MidiOut, 2, AcousticBass,  0.1);
Channel("synth", MidiOut, 3, Lead1Square,  0.1);
Channel("drums", MidiOut, 10, 32, 0.1); // kit

///// Volumes.
const double KEYS_VOL = 0.8;
const double DRUM_VOL = 0.8;

///// Sequences
Sequence seqDynamic;

// Compiler test.
//error
//int _unused = 48;

////// Simple variables for functions.
List<double> _scaleNotes;
List<double> _chordNotes;
List<double> _myChordNotes;
List<double> _myScaleNotes;


////// Nebulator setup stuff
public override void Setup()
{
    // Create sets of notes.
    CreateNotes("MY_SCALE", "1 3 4 b7");
    _myScaleNotes = GetNotes("B4.MY_SCALE");
    // Get some stock chords and scales.
    _scaleNotes = GetNotes("G3.Algerian");
    _chordNotes = GetNotes("C4.o7");

    BuildComp();
}    


///// Make the music.
public void BuildComp()
{
    /////////////////////// sequences /////////////////////////////////

    Sequence seqKeysVerse = CreateSequence(8, new SequenceElements
    {
        { "|7-      7-      |7-      7-      |", 4, "G4.m7", KEYS_VOL },
        { "|    5-      5-8-|    5-      5-8-|", 4, "G4.m6", KEYS_VOL*0.9 }
    });

    Sequence seqKeysChorus = CreateSequence(8, new SequenceElements
    {
        { 0.0, "F4",    0.7,      0.2 },
        { 0.2, "D#4",   KEYS_VOL, 0.2 },
        { 1.0, "C4",    0.7,      0.2 },
        { 1.2, "B4.m7", 0.7,      0.2 },
        { 2.0, "F5",    0.7,      0.2 },
        { 2.2, "D#5",   KEYS_VOL, 0.2 },
        { 3.0, "C5",    0.7,      0.2 },
        { 3.2, "B5.m7", 0.7,      0.2 },
        { 4.0, "F3",    0.7,      0.2 },
        { 4.2, "D#3",   KEYS_VOL, 0.2 },
        { 5.0, "C3",    0.7,      0.2 },
        { 5.2, "B3.m7", 0.7,      0.2 },
        { 6.0, "F2",    0.7,      0.2 },
        { 6.2, "D#2",   KEYS_VOL, 0.2 },
        { 7.0, "C2",    0.7,      0.2 },
        { 7.2, "B2.m7", 0.7,      0.2 },
    });

    Sequence seqDrumsSimple = CreateSequence(8, new SequenceElements
    {
        { 0.0, AcousticBassDrum,  DRUM_VOL },
        { 1.0, RideCymbal1,       DRUM_VOL },
        { 1.1, RideCymbal1,       DRUM_VOL },
        { 1.2, HiMidTom,          DRUM_VOL },
        { 2.0, AcousticBassDrum,  DRUM_VOL },
        { 3.0, RideCymbal1,       DRUM_VOL },
        { 3.1, RideCymbal1,       DRUM_VOL },
        { 4.0, AcousticBassDrum,  DRUM_VOL },
        { 5.0, RideCymbal1,       DRUM_VOL },
        { 5.1, RideCymbal1,       DRUM_VOL },
        { 5.2, HiMidTom,          DRUM_VOL },
        { 6.0, AcousticBassDrum,  DRUM_VOL },
        { 7.0, CrashCymbal2,      DRUM_VOL },
    });

    Sequence seqDrumsVerse = CreateSequence(8, new SequenceElements
    {
        { "|8       8       |8       8       |", 8, AcousticBassDrum, DRUM_VOL },
        { "|    8       8 8 |    8       8 8 |", 8, AcousticSnare,    DRUM_VOL*0.9 },
        { "|      88      88|      88      88|", 8, ClosedHiHat,      DRUM_VOL*1.1 },
    });

    Sequence seqBassVerse = CreateSequence(8, new SequenceElements
    {
        { 0.0, "C2",  0.7, 0.2 },
        { 0.2, "C2",  0.7, 0.1 },
        { 3.3, "E2",  0.7, 0.2 },
        { 4.0, "C2",  0.7, 1.0 },
        { 7.2, "A#2", 0.7, 0.1 }
    });

    Sequence seqAlgo = CreateSequence(4, new SequenceElements
    {
        { 1.2, Algo, 0.8 },
    });

    Sequence seqEmpty = CreateSequence(4, new SequenceElements
    {
    });

    // Sequence triggered in script.
    seqDynamic = CreateSequence(8, new SequenceElements
    {
        { 0.0, "G3 ", 0.7, 0.1 },
        { 1.0, "A3 ", 0.7, 0.1 },
        { 2.0, "Bb3", 0.7, 0.1 },
        { 3.0, "C4 ", 0.7, 0.1 },
    });


    /////////////////////// sections /////////////////////////////////

    Section sectBeginning = CreateSection(32, "Beginning", new SectionElements
    {
        { "keys",  Loop,  seqKeysVerse  },
        { "drums", Loop,  seqDrumsVerse },
        { "bass",  Loop,  seqBassVerse  }
    });

    Section sectMiddle = CreateSection(16, "Middle", new SectionElements
    {
        { "keys",  Loop,  seqKeysChorus },
        { "drums", Loop,  seqDrumsVerse },
        { "bass",  Loop,  seqBassVerse  },
        { "synth", Once,  seqAlgo, seqDynamic, seqAlgo, seqDynamic }
    });

    Section sectEnding = CreateSection(32, "Ending", new SectionElements
    {
        { "keys",  Loop,  seqKeysVerse   },
        { "drums", Loop,  seqDrumsSimple },
        { "bass",  Loop,  seqBassVerse   }
    });
}


////////////////// overrides /////////////////////////////

public override void Step()
{
    if(StepTime.Subdiv != 0) // not looking at these right now
    {
        return;
    }
}




// TODO1 add event handlers
/// <summary>Called when input arrives.</summary>
public virtual void InputNote(DeviceType dev, int channel, double note) { }

/// <summary>Called when input arrives.</summary>
public virtual void InputControl(DeviceType dev, int channel, ControllerDef ctlid, double value) { }



////////////////// custom functions /////////////////////////////

void Algo()
{
    int notenum = Random(0, _scaleNotes.Count());
    SendNote("synth", _scaleNotes[notenum], 0.7, 0.1);
}

void AlgoNull()
{
    // Print("!!!! AlgoNull");
}

