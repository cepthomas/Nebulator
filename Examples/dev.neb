
///// Tester for dev features.

// My akai kbd midi: Pad1=44, pad8=51, knob1=ctlr1, knob8=ctlr8



include utils.neb
include scale.neb


////////// Constants //////////
constant WHEN2         32
constant KEYS_DEF_VOL 100
constant DRUM_DEF_VOL 100

////////// Variables //////////
variable COL1   200 // change color
variable MODN     0 // modulate notes
variable PITCH 8192 // center is 8192

////////// Realtime Controllers //////////
midictlin  MI1 1 4     MODN
midictlout MO1 1 Pitch PITCH

////////// Levers //////////
lever L1   0  255   COL1
lever L2   0  16383 PITCH // max range
lever L3 -10  10    MODN

////////// Tracks //////////
track KEYS   1 5 0 0
track BASS   2 2 0 0
track SYNTH  3 0
track DRUMS 10 4 0 0

////////// Sections //////////
section PART1 0 WHEN2 // section name start length
KEYS   SEQ1           ALGO1       SEQ1        SEQ2
DRUMS  DRUMS_SIMPLE   DRUMS_HH 

section PART2 WHEN2 60
KEYS   SEQ1      SEQ2 
DRUMS  DRUMS_HH  DRUMS_HH   


////////// Sequences //////////

sequence SEQ1 8
00.00  G3     90  0.60
01.00  A3.m7  90  0.60
02.00  Bb3    90  0.60
03.00  C4     90  0.60

sequence SEQ2 8
00.00  C4  90  0.60
01.00  D4  90  0.60
02.00  E4  90  0.60
03.00  F4  90  0.60

sequence ALGO1 8
00.00  algoDynamic()  90


// Using patterns. Each hit is 1/16 note - fixed res for now.
sequence DRUMS_SIMPLE 8 // 32 x 1/16 = 8 x 1/4
x-------x-------x-------x------- AcousticBassDrum 90
----x-------x-x-----x-------x-x- AcousticSnare    80

sequence DRUMS_HH 8
------xx------xx------xx------xx ClosedHiHat 100


////////// Functions //////////

functions dev_stuff 999


int[] notesPlaying = new int[128];
Scale algerian;


public override void setup()
{
    algerian = new Scale();
    algerian.Init("Algerian", "C4");
    // 1 2 b3 #4 5 b6 7
    algerian.SetWeight(0, 50);
    algerian.SetWeight(4, 50);
    algerian.SetWeight(2, 30);

    // Patches (optional). Only needed if using the Windows GM.
    if(winGm)
    {
        sendPatch(KEYS, AcousticGrandPiano);
        sendPatch(BASS, AcousticBass);
        sendPatch(SYNTH, Pad3Polysynth);
    }
}

public override void step()
{
    if(tock == 0)
    {
        algoDynamic();
        //algoSequences();
        //algoRandom();
    }
}


void algoDynamic()
{
    if(random(3) == 0)
    {
        int which = algerian.NextNote();
        println("algoDynamic:", which);

        if(notesPlaying[which] == 0)
        {
            int dur = 4;// random(4, 20);
            notesPlaying[which] = tick + dur;
            sendMidiNote(KEYS, which, random(80, 100), dur);
        }
    }

    // Turn off any scheduled to stop now.
    for(int i = 0;i < notesPlaying.Length;i++)
    {
        if(notesPlaying[i] != 0 && notesPlaying[i] == tick)
        {
            sendMidiNote(KEYS, notesPlaying[i], 0, 0.00);
            notesPlaying[i] = 0;
        }
    }
}

void algoSequences()
{
    if(tick % 9 == 0)
    {
        playSequence(KEYS, SEQ1);
    }

    if(tick % 13 == 0)
    {
        playSequence(KEYS, SEQ2);
    }
}


public void On_MODN()
{
    println("MODN changed to", MODN);
    modulate(KEYS, MODN);
}

public override void draw()
{
    background(100, COL1, 200);

    // Recursive:
    // noLoop(); // run once only
    // drawRecursive(0, 0, width / 2, 1); // This uses a whole core with GDI.
    // return;

    if (mousePressedP)
    {
        //println("mouse is pressed");
        fill(random(255), random(255), random(255));
        strokeWeight(2);
        stroke(0, 100);
        ellipse(mouseX, mouseY, 80, 80);
    }
}

public override void mouseClicked()
{
    // Note selected based on mouse position.
    // int sn = (int)map(mouseX, 0, width, scaleNotes[0], scaleNotes[scaleNotes.Length-1]);
    // sendMidiNote(SYNTH, sn, 90, 0.48);

    boing();
}


// Recursive rendering - chokes Script.draw()
void drawRecursive(float x, float y, float squareSize, float minSize)
{
    rect(x, y, squareSize, squareSize);
    rect(x + squareSize, y, squareSize, squareSize);
    rect(x, y + squareSize, squareSize, squareSize);
    
    if (squareSize > minSize)
    {
        drawRecursive(x, y, squareSize / 2, minSize);
        drawRecursive(x + squareSize, y, squareSize / 2, minSize);
        drawRecursive(x, y + squareSize, squareSize / 2, minSize);
    }
}
