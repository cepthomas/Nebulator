
///// Include other lib files. /////
#import "utils.neb"
#import "scale.neb"

// TODOX - fills, intros, like that.

// TODOX time signature too. 3/4 means 3 beats per measure, each beat is 1/4 note.
// void SetTimeSig(int bpmeas, int bnote) { }
// Also determines TicksPerMeasure and PatternResolution.



///// IO device names.
string MIDI_IN = "MIDI:MPK mini";
string MIDI_OUT = "MIDI:loopMIDI Port 1";
string OSC_IN = "OSC:6448";
string OSC_OUT = "OSC:127.0.0.1:1234";
string GS_MIDI_OUT = "MIDI:Microsoft GS Wavetable Synth";

///// Volumes
const double KEYS_VOL = 0.8;
const double DRUM_VOL = 0.8;

///// Variables
NVariable vColor;
NVariable vModN;
NVariable vVkeyNote;

NVariable vCtl2;
NVariable vCtl3;
NVariable vMod1;
NVariable vKeyNote;

///// Channels
NChannel chKeys;
NChannel chBass;
NChannel chDrums;
NChannel chSynth;

///// Sequences
NSequence seqDynamic;


////// Simple variables for functions
double[] _scaleNotes;
double[] _chordNotes;
int _noteNum = 48;

// Use wingm and virtual kbd only.
bool _local = true;


////// Nebulator midi stuff
public override void Setup()
{
    // All the neb variables.
    vColor = CreateVariable("color", 200, 0, 255); // change color
    vModN = CreateVariable("modn", 0, -10, 10);
    vVkeyNote = CreateVariable("note", 60, -127, 127, On_vVkeyNote);
    vCtl2 = CreateVariable("ctl2", 200, 0, 255, On_vCtl2);
    vCtl3 = CreateVariable("ctl3", 200, 0, 255, On_vCtl3);
    vMod1 = CreateVariable("mod", 127, 0, 255, On_vMod1);
    //vKeyNote = CreateVariable("note", 60, -127, 127, On_vKeyNote); // note neg number for note off encoding

    // IO devices.
    if(_local)
    {
        // All the outputs.
        chKeys = CreateChannel("keys", GS_MIDI_OUT, 1);
        chBass = CreateChannel("bass", GS_MIDI_OUT, 2);
        chSynth = CreateChannel("synth", GS_MIDI_OUT, 3);
        chDrums = CreateChannel("drums", GS_MIDI_OUT, 10, true);

        // All the inputs.
        CreateController("VKEY:", 1, NoteControl, vVkeyNote);
    }
    else
    {
        // All the outputs.
        chKeys = CreateChannel("keys", MIDI_OUT, 1);
        chBass = CreateChannel("bass", MIDI_OUT, 2);
        chSynth = CreateChannel("synth", MIDI_OUT, 3);
        chDrums = CreateChannel("drums", MIDI_OUT, 10, true);

        // All the inputs.
        // CreateController(MIDI_IN, 1, 1, vMod1); // modulate eq
        // CreateController(MIDI_IN, 1, 2, vCtl2); // since I don't have a pitch knob, I'll use this instead
        // CreateController(MIDI_IN, 1, 3, vCtl3); // another controller
        // CreateController(MIDI_IN, 1, 4, BACK_COLOR); // change ui color
        // CreateController(MIDI_IN, 1, NoteControl, vKeyNote);
    }

    // Some wobblers.
    CreateWobbler(chKeys, 0.1);
    CreateWobbler(chBass, 0.1);
    CreateWobbler(chSynth, 0.1);
    CreateWobbler(chDrums, 0.1, 0.0, 0.05);

    // Create set of notes (chord)
    CreateNotes("MY_CHORD", "1 -4 6 -b13");
    CreateNotes("MY_SCALE", "1 3 4 b7");

    // levers
    CreateLever(vColor);
    CreateLever(vModN);

    // CreateController("VKEY:", 0, NoteControl, vVkeyNote);

    // Get some stock chords and scales
    _scaleNotes = GetScaleNotes("Algerian", "A3");
    _chordNotes = GetChordNotes("C4.o7");
}

public override void Setup2()
{
    if(_local)
    {
        SendPatch(chKeys, AcousticGrandPiano);
        SendPatch(chBass, AcousticBass);
        SendPatch(chSynth, Lead1Square);
        SendPatch(chDrums, 32); // kit
    }

    BuildComp();

    // Could do a pan:
    // SendController(chKeys, Pan, 30);
}

void BuildComp()
{

    /////////////////////// sequences /////////////////////////////////

    NSequence seqKeysVerse = CreateSequence(2, "Keys Verse", new NSequenceElements
    {
        // 16 ticks/meas: 32 hits == 8 ticks == 2 whole notes == 2 measure
        { "|7-      7-      |7-      7-      |", "G4.m7", KEYS_VOL },
        { "|    4-      4-8-|    4-      4-8-|", "G4.m6", KEYS_VOL*0.9 }
    });

    NSequence seqKeysChorus = CreateSequence(2, "Keys Chorus", new NSequenceElements
    {
        { 0.00, "F4",    0.7,      0.32 },
        { 0.32, "D#4",   KEYS_VOL, 0.32 },
        { 1.00, "C4",    0.7,      0.32 },
        { 1.32, "B4.m7", 0.7,      0.32 },
        { 2.00, "F5",    0.7,      0.32 },
        { 2.32, "D#5",   KEYS_VOL, 0.32 },
        { 3.00, "C5",    0.7,      0.32 },
        { 3.32, "B5.m7", 0.7,      0.32 },
        { 4.00, "F3",    0.7,      0.32 },
        { 4.32, "D#3",   KEYS_VOL, 0.32 },
        { 5.00, "C3",    0.7,      0.32 },
        { 5.32, "B3.m7", 0.7,      0.32 },
        { 6.00, "F2",    0.7,      0.32 },
        { 6.32, "D#2",   KEYS_VOL, 0.32 },
        { 7.00, "C2",    0.7,      0.32 },
        { 7.32, "B2.m7", 0.7,      0.32 },
    });

    NSequence seqDrumsSimple = CreateSequence(2, "Drums Simple", new NSequenceElements
    {
        { 0.00, AcousticBassDrum,  DRUM_VOL },
        { 1.00, RideCymbal1,       DRUM_VOL },
        { 1.10, RideCymbal1,       DRUM_VOL },
        { 1.60, HiMidTom,          DRUM_VOL },
        { 2.00, AcousticBassDrum,  DRUM_VOL },
        { 3.00, RideCymbal1,       DRUM_VOL },
        { 3.10, RideCymbal1,       DRUM_VOL },
        { 4.00, AcousticBassDrum,  DRUM_VOL },
        { 5.00, RideCymbal1,       DRUM_VOL },
        { 5.10, RideCymbal1,       DRUM_VOL },
        { 5.60, HiMidTom,          DRUM_VOL },
        { 6.00, AcousticBassDrum,  DRUM_VOL },
        { 7.00, CrashCymbal2,      DRUM_VOL },
    });

    NSequence seqDrumsVerse = CreateSequence(2, "Drums Verse", new NSequenceElements
    {
        { "|8       8       |8       8       |", AcousticBassDrum, DRUM_VOL },
        { "|    8       8 8 |    8       8 8 |", AcousticSnare,    DRUM_VOL*0.9 },
        { "|      88      88|      88      88|", ClosedHiHat,      DRUM_VOL*1.1 },
    });

    NSequence seqBassVerse = CreateSequence(2, "Big bottom", new NSequenceElements
    {
        { 0.00, "C2",  0.75, 0.25 },
        { 0.48, "C2",  0.75, 0.125 },
        { 3.32, "E2",  0.75, 0.25 },
        { 4.00, "C2",  0.75, 1.00 },
        { 7.48, "A#2", 0.75, 0.10 }
    });

    NSequence seqAlgo = CreateSequence(1, "Algo", new NSequenceElements
    {
        { 1.60, AlgoDynamic, 0.8 },
    });

    NSequence seqEmpty = CreateSequence(1, "Quiet!", new NSequenceElements
    {
    });

    // Sequence triggered in script.
    seqDynamic = CreateSequence(2, "Dynomite", new NSequenceElements
    {
        { 0.00, "G3 ", 0.75, 0.60 },
        { 1.00, "A3 ", 0.75, 0.60 },
        { 2.00, "Bb3", 0.75, 0.60 },
        { 3.00, "C4 ", 0.75, 0.60 },
    });


    /////////////////////// sections /////////////////////////////////

    CreateSection(8, "Beginning", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysVerse   },
        { chDrums, Loop,  seqDrumsSimple },
        { chBass,  Loop,  seqBassVerse   }
    });

    CreateSection(4, "Middle", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysChorus },
        { chDrums, Loop,  seqDrumsVerse },
        { chBass,  Loop,  seqBassVerse  },
        { chSynth, Once,  seqAlgo,  seqEmpty, seqDynamic, seqEmpty }
    });

    CreateSection(8, "Ending", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysVerse   },
        { chDrums, Loop,  seqDrumsSimple },
        { chBass,  Loop,  seqBassVerse   }
    });
}

////////////////// overrides /////////////////////////////

public override void Step()
{
    if(Tock != 0) // not looking at Tocks right now
    {
    }
}

////////////////// my functions /////////////////////////////

void AlgoDynamic()
{
    // Print("!!!! AlgoDynamic");
    int notenum = Random(55, 70);
    SendNote(chSynth, notenum, 0.8, 0.30);
}

void AlgoNull()
{
    // Print("!!!! AlgoNull");
}

////////////// event handlers ////////////////////

public void On_vCtl2()
{
    int newval = (int)MathUtils.Map(vCtl2.Value, 0, 127, 0, 16383);
    //Print("On_vCtl2:", newval);
    SendController(chSynth, PitchControl, newval);
}

public void On_vCtl3()
{
    //Print("On_vCtl3:", vCtl3.Value);
    if(Random(0, 10) == 0)
    {
        SendNote(chKeys, 50 + vCtl3.Value % 20, 0.7, 2.0);
    }
}

public void On_vMod1()
{
    //Print(vMod1.Name, "changed to", vMod1.Value);
    // Send a controller change.
    SendController(chSynth, Modulation, vMod1.Value);
}

public void On_vVkeyNote()
{
    //Print("vVkeyNote", "=", vVkeyNote.Value);

    // Test for note on or off.
    if(vVkeyNote.Value > 0)
    {
        SendNoteOn(chSynth, vVkeyNote.Value, 0.9);
    }
    else
    {
        SendNoteOff(chSynth, -vVkeyNote.Value);
    }
}
