
///// Include other lib files. /////
#import "utils.neb"
#import "scale.neb"


// Volumes
const double KEYS_VOL = 0.8;
const double DRUM_VOL = 1.0;
const double BASS_VOL = 1.0;


///// Channels /////
NChannel chKeys;
NChannel chBass;
NChannel chDrums;
NChannel chSynth;

// Use wingm and virtual kbd only.
bool _local = false;


////// Nebulator midi stuff //////
public override void Setup()
{
    string midiout = _local ? "MIDI:Microsoft GS Wavetable Synth" : "MIDI:loopMIDI Port 1";

    // IO devices.
    // All the outputs.
    chKeys = CreateChannel("keys", midiout, 1, 0.1);
    chBass = CreateChannel("bass", midiout, 2, 0.1);
    chSynth = CreateChannel("synth", midiout, 3, 0.1);
    chDrums = CreateChannel("drums", midiout, 10, 0.1);
}

public override void Setup2()
{
    if(_local)
    {
        SendPatch(chKeys, AcousticGrandPiano);
        SendPatch(chBass, AcousticBass);
        SendPatch(chSynth, Lead1Square);
        SendPatch(chDrums, 32); // kit
    }

    BuildComp();
}

void BuildComp()
{

    /////////////////////// sequences /////////////////////////////////

    NSequence seqKeysVerse = CreateSequence(4, "Keys Verse", new NSequenceElements
    {
        // 4 ticks/meas == 16 hits/meas == 4 qtr notes/meas
        { "|9-------------  |                |                |                |", "B4.m", KEYS_VOL },
        { "|                |9-------------  |                |                |", "A4.m", KEYS_VOL },
        { "|                |                |9---------------|----------      |", "E4.m", KEYS_VOL },
    });

    NSequence seqDrumsVerse = CreateSequence(4, "Drums Verse", new NSequenceElements
    {
        { "|8.8.8.8.8.8.8.8.|8.8.8.8.8.8.8.8.|8.8.8.8.8.8.8.8.|8.8.8.8.8.8.8.8.|", RideCymbal1,      DRUM_VOL*0.8 },
        { "|....8.......8...|....8.......8...|....8.......8...|....8.......8...|", SideStick,        DRUM_VOL*0.9 },
        { "|8.....8.8.......|8.....8.8.......|8.....8.8.......|8.....8.8.......|", AcousticBassDrum, DRUM_VOL },
        
        // { "|8       8       |8       8       |8       8       |8       8       |", AcousticBassDrum, DRUM_VOL },
        // { "|    8       8   |    8       8   |    8       8   |    8       8   |", SideStick,    DRUM_VOL*0.9 },
        // { "|      8       8 |      8       8 |      8       8 |      8       8 |", RideCymbal1,      DRUM_VOL*1.1 },
    });


    NSequence seqBassVerse = CreateSequence(4, "Big bottom", new NSequenceElements
    {
        { "|9----.9.9------.|................|................|................|", "B2", BASS_VOL },
        { "|................|9----.9.9------.|................|................|", "A2", BASS_VOL },
        { "|................|................|9----.9.9------.|9----.9.9------.|", "E2", BASS_VOL },
        // { "|9------------...|... ...         |", "B2", BASS_VOL },
        // { "|    ...      9- |9--     9876543 |", "D2", BASS_VOL },
    });


    /////////////////////// sections /////////////////////////////////

    CreateSection(8, "Middle", new NSectionElements
    {
        { chKeys,  Loop,  seqKeysVerse },
        { chDrums, Loop,  seqDrumsVerse },
        { chBass,  Loop,  seqBassVerse  },
    });


    // CreateSection(8, "Beginning", new NSectionElements
    // {
    //     { chKeys,  Loop,  seqKeysVerse   },
    //     { chDrums, Loop,  seqDrumsSimple },
    //     { chBass,  Loop,  seqBassVerse   }
    // });

    // CreateSection(4, "Middle", new NSectionElements
    // {
    //     { chKeys,  Loop,  seqKeysChorus },
    //     { chDrums, Loop,  seqDrumsVerse },
    //     { chBass,  Loop,  seqBassVerse  },
    //     { chSynth, Once,  seqAlgo,  seqEmpty, seqDynamic, seqEmpty }
    // });

    // CreateSection(8, "Ending", new NSectionElements
    // {
    //     { chKeys,  Loop,  seqKeysVerse   },
    //     { chDrums, Loop,  seqDrumsSimple },
    //     { chBass,  Loop,  seqBassVerse   }
    // });
}

////////////////// overrides /////////////////////////////

public override void Step()
{
    if(Tock != 0) // not looking at Tocks right now
    {
    }
}
