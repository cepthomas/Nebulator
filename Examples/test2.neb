
///// Tester for recursive rendering.

///// Variables /////
COL1 = var(200); // change color
MODN = var(0); // modulate notes
PITCH = var(8192); // center is 8192

///// Realtime Controllers /////
MI1 = midiin(1, 4, MODN);
MO1 = midiout(1, Pitch, PITCH);

////// Levers //////
L1 = lever(0, 255, COL1);
L2 = lever(0, 16383, PITCH); // max range
L3 = lever(-10, 10, MODN);



/////////////////////////////////////////////

///// Functions /////

// Simple variables for functions.
float posX = 50;
float posY = 50;
int velX = 3;
int velY = 3;
int ballSize = 40;
//int note = 60;


/*
Simple fractal
Donya Quick
*/

public override void setup()
{
    //size(500, 500);
    noStroke();
    fill(0, 45);
}

//println(w, "x", h);

public override void draw()
{
    background(255);
    drawPattern(0, 0, width / 2, 1); // change last argument to 1 for more detail
}

void drawPattern(float x, float y, float squareSize, float minSize)
{
    rect(x, y, squareSize, squareSize);
    rect(x + squareSize, y, squareSize, squareSize);
    rect(x, y + squareSize, squareSize, squareSize);
    
    if (squareSize > minSize)
    {
        drawPattern(x, y, squareSize / 2, minSize);
        drawPattern(x + squareSize, y, squareSize / 2, minSize);
        drawPattern(x, y + squareSize, squareSize / 2, minSize);
    }
}
