

// Akai kbd midi: Pad1-8 are notes 44-51, knob1-8 are controllers ctlr1-8.

// All the neb variables.
NVariable BACK_COLOR;
NVariable MOD1;
NVariable KBD_NOTE;

// All the output channels.
NChannel PIANO;
NChannel BASS;
NChannel SYNTH;
NChannel DRUMS;

// All the sequences
NSequence PIANO_SEQ_1;
NSequence PIANO_SEQ_2;
NSequence BASS_SEQ_1;
NSequence DRUMS_SEQ_1;
NSequence DRUMS_SEQ_2;

// All the sections
NSection PART1;
NSection PART2;
NSection PART3;

const int WHEN1 = 0;
const int WHEN2 = 32;
const int WHEN3 = 48;
const int WHEN4 = 80;

const int PIANO_DEF_VOL = 100;
const int DRUM_DEF_VOL = 100;

// Index is note number, value is when to stop it.
int[] _notesPlaying = new int[128];

// Use wingm and virtual kbd only.
bool _local = true;


public override void setupNeb()
{
    // All the neb variables.
    BACK_COLOR = createVariable("color", 200, 0, 255, On_BACK_COLOR);
    MOD1 = createVariable("mod", 127, 0, 255, On_MOD1);
    KBD_NOTE = createVariable("note", 60, -127, 127, On_KBD_NOTE); // note neg number for note off encoding

    if(_local)
    {
        string MY_MIDI_OUT = "Microsoft GS Wavetable Synth";

        // All the output channels.
        PIANO = createChannel("piano", MY_MIDI_OUT, 1, 5);
        BASS = createChannel("bass", MY_MIDI_OUT, 2, 4);
        SYNTH = createChannel("synth", MY_MIDI_OUT, 3, 0);
        DRUMS = createChannel("drums", MY_MIDI_OUT, 10, 4);

        createController("Virtual Keyboard", 0, NoteControl, VKBD_NOTE);
    }
    else
    {
        string MY_MIDI_OUT = "loopMIDI Port 1";
        string MY_MIDI_IN = "MPK mini";

        // All the output channels.
        PIANO = createChannel("piano", MY_MIDI_OUT, 1, 5);
        BASS = createChannel("bass", MY_MIDI_OUT, 2, 4);
        SYNTH = createChannel("synth", MY_MIDI_OUT, 3, 0);
        DRUMS = createChannel("drums", MY_MIDI_OUT, 10, 4);

        createController(MY_MIDI_IN, 1, 1, MOD1); // modulate eq
        createController(MY_MIDI_IN, 1, 2, CTL2); // since I don't have a pitch knob, I'll use this instead
        createController(MY_MIDI_IN, 1, 3, CTL3); // another controller
        createController(MY_MIDI_IN, 0, 4, BACK_COLOR); // change ui color
        createController(MY_MIDI_IN, 1, NoteControl, KBD_NOTE);
    }

    // levers
    createLever(BACK_COLOR);
    createLever(MOD1);

    ///// Sequences /////
    PIANO_SEQ_1 = createSequence(16);
    PIANO_SEQ_1.Add(0.00,  "G4.m7", 90, 1.32);
    PIANO_SEQ_1.Add(1.60,  "G4.m7", 90, 0.20);
    PIANO_SEQ_1.Add(2.00,  "G4.m7", 90, 0.20);
    PIANO_SEQ_1.Add(4.00,  "G4.m7", 90, 1.32);
    PIANO_SEQ_1.Add(5.60,  "G4.m7", 90, 0.20);
    PIANO_SEQ_1.Add(6.00,  "G4.m7", 90, 0.20);
    PIANO_SEQ_1.Add(8.00,  "G4.m6", 90, 1.32);
    PIANO_SEQ_1.Add(9.60,  "G4.m6", 90, 0.20);
    PIANO_SEQ_1.Add(10.00, "G4.m6", 90, 0.20);
    PIANO_SEQ_1.Add(12.00, "G4.m6", 90, 1.32);
    PIANO_SEQ_1.Add(13.60, "G4.m6", 90, 0.20);
    PIANO_SEQ_1.Add(14.00, "G4.m6", 90, 0.20);

    PIANO_SEQ_2 = createSequence(8);
    PIANO_SEQ_2.Add(0.00, "F4",    90, 0.32);
    PIANO_SEQ_2.Add(0.32, "D#4",   PIANO_DEF_VOL, 0.32);
    PIANO_SEQ_2.Add(1.00, "C4",    90, 0.32);
    PIANO_SEQ_2.Add(1.32, "B4.m7", 90, 0.32);
    PIANO_SEQ_2.Add(2.00, "F5",    90, 0.32);
    PIANO_SEQ_2.Add(2.32, "D#5",   PIANO_DEF_VOL, 0.32);
    PIANO_SEQ_2.Add(3.00, "C5",    90, 0.32);
    PIANO_SEQ_2.Add(3.32, "B5.m7", 90, 0.32);
    PIANO_SEQ_2.Add(4.00, "F3",    90, 0.32);
    PIANO_SEQ_2.Add(4.32, "D#3",   PIANO_DEF_VOL, 0.32);
    PIANO_SEQ_2.Add(5.00, "C3",    90, 0.32);
    PIANO_SEQ_2.Add(5.32, "B3.m7", 90, 0.32);
    PIANO_SEQ_2.Add(6.00, "F2",    90, 0.32);
    PIANO_SEQ_2.Add(6.32, "D#2",   PIANO_DEF_VOL, 0.32);
    PIANO_SEQ_2.Add(7.00, "C2",    90, 0.32);
    PIANO_SEQ_2.Add(7.32, "B2.m7", 90, 0.32);

    ////// Bass //////
    BASS_SEQ_1 = createSequence(8);
    BASS_SEQ_1.Add(0.00, "C2",  70, 0.25);
    BASS_SEQ_1.Add(0.48, "C2",  70, 0.125);
    BASS_SEQ_1.Add(3.32, "E2",  70, 0.25);
    BASS_SEQ_1.Add(4.00, "C2",  70, 1.00);
    BASS_SEQ_1.Add(7.48, "A#2", 70, 0.10);

    ////// Drums //////
    DRUMS_SEQ_1 = createSequence(8);
    DRUMS_SEQ_1.Add(0.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(1.00, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(1.10, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(1.60, HiMidTom,         DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(2.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(3.00, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(3.10, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(4.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(5.00, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(5.10, RideCymbal1,      DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(5.60, HiMidTom,         DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(6.00, AcousticBassDrum, DRUM_DEF_VOL);
    DRUMS_SEQ_1.Add(7.00, CrashCymbal2,     DRUM_DEF_VOL);

    // Using patterns. Each hit is 1/16 note - fixed resolution and volume for now.
    DRUMS_SEQ_2 = createSequence(8);
    DRUMS_SEQ_2.Add("x-------x-------x-------x-------", AcousticBassDrum, 90);
    DRUMS_SEQ_2.Add("----x-------x-x-----x-------x-x-", AcousticSnare, 80);
    DRUMS_SEQ_2.Add("------xx------xx------xx------xx", ClosedHiHat, 100);

    // DRUMS_SIMPLE.Add("x-------x-------x-------x-------", AcousticBassDrum, 90);
    // DRUMS_SIMPLE.Add("---xx-------x------xx-------x---", AcousticSnare, 80);
    // DRUMS_SIMPLE.Add("x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-", ClosedHiHat, 50);

    // Sections
    NSection PART1 = createSection("part1", WHEN1, WHEN2 - WHEN1);
    PART1.Add(PIANO,  PIANO_SEQ_1,  PIANO_SEQ_1);
    PART1.Add(DRUMS,  DRUMS_SEQ_1,  DRUMS_SEQ_1,  DRUMS_SEQ_1,  DRUMS_SEQ_1);
    PART1.Add(BASS,   BASS_SEQ_1,   BASS_SEQ_1,   BASS_SEQ_1,   BASS_SEQ_1);

    NSection PART2 = createSection("part2", WHEN2, WHEN3 - WHEN2);
    PART2.Add(PIANO,  PIANO_SEQ_2,  PIANO_SEQ_2);
    PART2.Add(DRUMS,  DRUMS_SEQ_2,  DRUMS_SEQ_2);
    PART2.Add(BASS,   BASS_SEQ_1,   BASS_SEQ_1);

    NSection PART3 = createSection("part3", WHEN3, WHEN4 - WHEN3);
    PART3.Add(PIANO,  PIANO_SEQ_1,  PIANO_SEQ_1);
    PART3.Add(DRUMS,  DRUMS_SEQ_1,  DRUMS_SEQ_1,  DRUMS_SEQ_1,  DRUMS_SEQ_1);
    PART3.Add(BASS,   BASS_SEQ_1,   BASS_SEQ_1,   BASS_SEQ_1,   BASS_SEQ_1);
}

public override void step()
{
    if(tick == 0 && tock == 0 && _local)
    {
        sendPatch(PIANO, AcousticGrandPiano);
        sendPatch(BASS, AcousticBass);
        sendPatch(SYNTH, Lead1Square);
        sendPatch(DRUMS, 32);
    }
    return;

    // from boids:
    if(tock % 4 == 0 && random(7) == 0) // play with these for how often
    {
        int which = random(40, 80);

        if(_notesPlaying[which] == 0) // don't play if already playing
        {
            //print("algoDynamic:", which);
            int dur = random(1, 8);
            _notesPlaying[which] = tick + dur;
            sendNote(SYNTH, which, random(80, 100), dur);
        }

        // Remove any scheduled to stop now.
        for(int i = 0;i < _notesPlaying.Length;i++)
        {
            if(_notesPlaying[i] != 0 && _notesPlaying[i] == tick)
            {
                _notesPlaying[i] = 0;
            }
        }
    }
}

public void On_BACK_COLOR()
{
    //print(BACK_COLOR.Name, "changed to", BACK_COLOR.Value);
}

public void On_MOD1()
{
    //print(MOD1.Name, "changed to", MOD1.Value);
    // Send a controller change.
    //sendController(SYNTH, 1, MOD1.Value);
}

public void On_KBD_NOTE()
{
    //print("KBD_NOTE", "=", KBD_NOTE.Value);

    // Test for note on or off.
    if(KBD_NOTE.Value > 0)
    {
        //sendNoteOn(SYNTH, KBD_NOTE.Value, 110);
    }
    else
    {
        // sendNoteOff(SYNTH, -KBD_NOTE.Value);
    }
}

public override void setup()
{
    size(500, 500);

    colorMode(HSB, 360, 100, 100);
    noStroke(); // draw no lines
    frameRate(2);

    BACK_COLOR.Value = 100;
}

public override void draw()
{
    background(BACK_COLOR.Value, 100, 200);
}
