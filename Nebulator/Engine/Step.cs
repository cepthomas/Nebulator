using System;
using System.Collections.Generic;
using System.Linq;
using Nebulator.Common;
using Nebulator.Model;


namespace Nebulator.Engine
{
    /// <summary>
    /// Base class for internal representation of a compiled event to be sent as midi.
    /// It has some extra functionality not supported by the NAudio MidiEvent.
    /// </summary>
    public abstract class Step
    {
        /// <summary>Reference to parent/owner track.</summary>
        public Track ParentTrack { get; set; } = null;

        /// <summary>Channel.</summary>
        public int Channel { get; set; } = 1;

        /// <summary>
        /// Possibly make adjustments to values.
        /// </summary>
        public virtual void Adjust()
        {
        }

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"Channel:{Channel}";
        }
    }

    public class StepNoteOn : Step
    {
        /// <summary>Aka NoteId.</summary>
        public int NoteNumber { get; set; } = 60;

        /// <summary>Modified NoteId.</summary>
        public int NoteNumberToPlay { get; set; } = 60;

        /// <summary>Aka Volume.</summary>
        public int Velocity { get; set; } = 90;

        /// <summary>Modified Volume.</summary>
        public int VelocityToPlay { get; set; } = 90;

        /// <summary>Time between note on/off in Tocks. Default of 0 indicates note off generated by owner.</summary>
        public int Duration { get; set; } = 0;

        /// <summary>
        /// Possibly make adjustments to values.
        /// </summary>
        public override void Adjust()
        {
            // Maybe alter note velocity.
            int trackVolume = ParentTrack != null ? ParentTrack.Volume : Midi.MAX_MIDI_VOLUME;
            int masterVolume = Globals.CurrentPersisted.Volume;
            int vel = Velocity * trackVolume * masterVolume / Midi.MAX_MIDI_VOLUME / Midi.MAX_MIDI_VOLUME;
            VelocityToPlay = Utils.Constrain(vel, 0, Midi.MAX_MIDI_VOLUME);

            // Maybe alter note number.
            NoteNumberToPlay = Utils.Constrain(NoteNumber + ParentTrack.Modulate, 0, Midi.MAX_MIDI_NOTE);
        }

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepNoteOn: {base.ToString()} NoteNumberToPlay:{NoteNumberToPlay} VelocityToPlay:{VelocityToPlay}";
        }
    }

    public class StepNoteOff : Step
    {
        /// <summary>Defined NoteId.</summary>
        public int NoteNumber { get; set; } = 60;

        /// <summary>Modified NoteId.</summary>
        public int NoteNumberToPlay { get; set; } = 60;

        /// <summary>Velocity.</summary>
        public int Velocity { get; set; } = 64; // seems to be standard default.

        /// <summary>When it's done in msec - used by stop note tracking.</summary>
        public int Expiry { get; set; } = -1;

        /// <summary>Constructor to make a deferred note off from a note on.</summary>
        /// <param name="step"></param>
        public StepNoteOff(StepNoteOn step)
        {
            ParentTrack = step.ParentTrack;
            Channel = step.Channel;
            NoteNumber = Utils.Constrain(step.NoteNumber, 0, Midi.MAX_MIDI_NOTE);
            NoteNumberToPlay = step.NoteNumberToPlay;
            Expiry = step.Duration;
        }

        /// <summary>Default constructor.</summary>
        public StepNoteOff()
        {
        }

        /// <summary>
        /// Possibly make adjustments to values.
        /// </summary>
        public override void Adjust()
        {
            // Maybe alter note number.
            NoteNumberToPlay = Utils.Constrain(NoteNumber + ParentTrack.Modulate, 0, Midi.MAX_MIDI_NOTE);
        }

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepNoteOff: {base.ToString()} NoteNumberToPlay:{NoteNumberToPlay}";
        }
    }

    public class StepControllerChange : Step
    {
        /// <summary>Specific controller.</summary>
        public int MidiController { get; set; } = Midi.CTRL_NONE;

        /// <summary>The midi payload. Also used for Pitch.</summary>
        public int ControllerValue { get; set; } = 0;

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepControllerChange: {base.ToString()} Controller:{ControllerValue}";
        }
    }

    public class StepPatch : Step
    {
        /// <summary>Specific patch.</summary>
        public int PatchNumber { get; set; } = 0;

        /// <summary>For viewing pleasure.</summary>
        public override string ToString()
        {
            return $"StepPatchChange: {base.ToString()} PatchNumber:{PatchNumber}";
        }
    }
}
